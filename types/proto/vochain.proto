syntax = "proto3";

package dvote.types.v1;

option go_package = "gitlab.com/vocdoni/go-dvote/types/proto";


enum TxType {
	UNKNOWN = 0;
	NEWPROCESS = 1;
	CANCELPROCESS = 2;
	ADDPROCESSKEYS = 3;
	REVEALPROCESSKEYS = 4;
	ADDORACLE = 5;
	REMOVEORACLE = 6;
	ADDVALIDATOR = 7;
	REMOVEVALIDATOR = 8;
}

message Tx {
	oneof tx {
		VoteEnvelope vote = 2;
		NewProcessTx newProcess = 3;
		CancelProcessTx cancelProcess = 4;
		AdminTx admin = 5;
	}
	optional bytes signature = 1;
}

message VoteEnvelope {
	string nonce = 2;  // Unique number per vote attempt, so that replay attacks can't reuse this payload
	bytes processId = 3;  // The process for which the vote is casted
	Proof proof = 4;  // Merkle proof, ZK Proof or Ethereum storage proof
	bytes votePackage = 5;   // base64 encoded bytes[] of the VotePackage
	optional bytes nullifier = 6;  // Hash of the private key + processId
	repeated uint32 encryptionKeyIndexes = 7; // On encrypted votes, contains the (sorted) indexes of the keys used to encrypt
}

message Proof {
	oneof proof {
		ProofGraviton graviton = 1;
		ProofIden3 iden3 = 2;
		ProofEthereumStorage ethStg = 3;
		ProofEthereumAccount ethAcc = 4;
	}
}

message ProofGraviton {
	bytes siblings = 1;
}

message ProofIden3 {
	bytes siblings = 1;
}

message ProofEthereumStorage {
	bytes key = 1;
	bytes value = 2;
	repeated bytes siblings = 3;
}

message ProofEthereumAccount {
	string nonce = 1;
	string balance = 2;
	bytes storageHash = 3;
	bytes codeHash = 4;
	repeated bytes siblings = 5;
}

message NewProcessTx {
	TxType txtype = 1;
	bytes entityId = 2;
	bytes processId = 3;
	bytes mkRoot = 4;
	string  processType = 5;
	uint64 startBlock = 6;
	optional string mkURI = 7;
	uint64 numberOfBlocks = 8;
	string nonce = 9;  
}

message CancelProcessTx {
	TxType txtype = 1;
	bytes processId = 2;
	string nonce = 3;
}

message AdminTx {
	TxType txtype = 1;
	bytes processId = 2;
	optional bytes address = 3;
	optional bytes commitmentKey = 4;
	optional bytes encryptionPrivateKey = 5;
	optional bytes encryptionPublicKey = 6;
	optional uint32 keyIndex = 7;
	optional uint64 power = 8;
	optional bytes publicKey = 9;
	optional bytes revealKey = 10;
	string nonce = 11;  
}


