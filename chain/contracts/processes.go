// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProcessesABI is the input ABI used to generate the binding from.
const ProcessesABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"predecessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenStorageProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"ActivatedSuccessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"CensusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"namespaceAddr\",\"type\":\"address\"}],\"name\":\"NamespaceAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"NewProcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newIndex\",\"type\":\"uint8\"}],\"name\":\"QuestionIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"ResultsAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"activateSuccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_censusMerkleRoot_censusMerkleTree\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8[5]\",\"name\":\"questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[5]\"},{\"internalType\":\"uint16[3]\",\"name\":\"maxTotalCost_costExponent_namespace\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getCreationInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getEntityProcessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"getNextProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getParamsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"entityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"processCountIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"namespace\",\"type\":\"uint16\"}],\"name\":\"getProcessId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint32[][]\",\"name\":\"tally\",\"type\":\"uint32[][]\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"incrementQuestionIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namespaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"mode_envelopeType_censusOrigin\",\"type\":\"uint8[3]\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"string[3]\",\"name\":\"metadata_merkleRoot_merkleTree\",\"type\":\"string[3]\"},{\"internalType\":\"uint32[2]\",\"name\":\"startBlock_blockCount\",\"type\":\"uint32[2]\"},{\"internalType\":\"uint8[4]\",\"name\":\"questionCount_maxCount_maxValue_maxVoteOverwrites\",\"type\":\"uint8[4]\"},{\"internalType\":\"uint16[3]\",\"name\":\"maxTotalCost_costExponent_namespace\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint256\",\"name\":\"evmBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsSignature\",\"type\":\"bytes32\"}],\"name\":\"newProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predecessorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"censusMerkleRoot\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"censusMerkleTree\",\"type\":\"string\"}],\"name\":\"setCensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"}],\"name\":\"setNamespaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32[][]\",\"name\":\"tally\",\"type\":\"uint32[][]\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"name\":\"setResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"processId\",\"type\":\"bytes32\"},{\"internalType\":\"enumIProcessStore.Status\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorageProofAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// ProcessesBin is the compiled bytecode used for deploying new contracts.
var ProcessesBin = "0x60806040523480156200001157600080fd5b506040516200407638038062004076833981016040819052620000349162000244565b60008054336001600160a01b03199091161790556200005f8362000105602090811b620018c417901c565b62000075826200021b60201b620019bc1760201c565b6200009d5760405162461bcd60e51b8152600401620000949062000297565b60405180910390fd5b620000b3816200021b60201b620019bc1760201c565b620000d25760405162461bcd60e51b8152600401620000949062000378565b600480546001600160a01b039384166001600160a01b0319918216179091556005805492909316911617905550620003fc565b6000546001600160a01b03163314620001325760405162461bcd60e51b81526004016200009490620002c2565b6001546001600160a01b0316156200015e5760405162461bcd60e51b81526004016200009490620003af565b60035415620001815760405162461bcd60e51b815260040162000094906200034d565b6001600160a01b0381161562000213576001600160a01b038116301415620001bd5760405162461bcd60e51b8152600401620000949062000324565b620001d3816200021b60201b620019bc1760201c565b620001f25760405162461bcd60e51b81526004016200009490620002ed565b600180546001600160a01b0319166001600160a01b03831617905562000218565b436003555b50565b6000806001600160a01b038316620002385760009150506200023f565b5050803b15155b919050565b60008060006060848603121562000259578283fd5b83516200026681620003e6565b60208501519093506200027981620003e6565b60408501519092506200028c81620003e6565b809150509250925092565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b60208082526013908201527f496e76616c6964207072656465636573736f7200000000000000000000000000604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b60208082526019908201527f496e76616c696420746f6b656e53746f7261676550726f6f6600000000000000604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b6001600160a01b03811681146200021857600080fd5b613c6a806200040c6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806374da4adb116100ad5780638de654ba116100715780638de654ba1461024a5780638eaa6ac01461025d578063c876091f14610284578063f2bcb15e1461028c578063ff5956ed1461029f5761012c565b806374da4adb146101f657806377882df41461020957806380faa3d21461021c57806381bc8d901461022457806381c0de75146102375761012c565b8063305097bb116100f4578063305097bb14610194578063317daac5146101a757806334a2cdbc146101ba57806343327872146101c257806346475c4c146101d55761012c565b806308ffce24146101315780630f15f4c01461014f5780631795010d146101595780631d88c05b1461016c5780631f49662314610174575b600080fd5b6101396102b2565b6040516101469190613109565b60405180910390f35b6101576102c1565b005b610157610167366004612f80565b610352565b6101396105eb565b610187610182366004612a88565b6105fa565b6040516101469190613255565b6101876101a2366004612ac0565b61061d565b6101876101b5366004612e1f565b610653565b610139610741565b6101396101d0366004612e1f565b610750565b6101e86101e3366004612e1f565b610824565b60405161014692919061311d565b610157610204366004612e1f565b6109e7565b610157610217366004612a50565b610c4d565b610187610cf2565b610157610232366004612c05565b610cf8565b610157610245366004612a50565b610d86565b610157610258366004612f5c565b610eee565b61027061026b366004612e1f565b61117f565b6040516101469897969594939291906131b8565b61013961159f565b61018761029a366004612a50565b6115ae565b6101576102ad366004612e4f565b611652565b6001546001600160a01b031681565b6001546001600160a01b031633146102f45760405162461bcd60e51b81526004016102eb906133cd565b60405180910390fd5b600354156103145760405162461bcd60e51b81526004016102eb906137d9565b4360038190556040517f3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce9161034891613255565b60405180910390a1565b600060035411801561036d57506002546001600160a01b0316155b6103895760405162461bcd60e51b81526004016102eb906136e8565b60008251116103aa5760405162461bcd60e51b81526004016102eb9061337b565b60008151116103cb5760405162461bcd60e51b81526004016102eb906134ec565b600083815260076020526040902054630100000090046001600160a01b031661042e576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb9061341e565b60405162461bcd60e51b81526004016102eb90613801565b600083815260076020526040902054630100000090046001600160a01b0316331461046b5760405162461bcd60e51b81526004016102eb90613514565b600083815260076020526040812060049081015460ff169081111561048c57fe5b14806104b857506003600084815260076020526040902060049081015460ff16908111156104b657fe5b145b6104d45760405162461bcd60e51b81526004016102eb90613687565b6000838152600760205260409020546004166105025760405162461bcd60e51b81526004016102eb90613838565b6000808481526007602052604090205462010000900460ff16600581111561052657fe5b146105435760405162461bcd60e51b81526004016102eb906139d8565b6000838152600760209081526040909120835161056892600290920191850190612444565b506000838152600760209081526040909120825161058e92600390920191840190612444565b50600083815260076020526040908190206004015490517fe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211916105de918691600160501b900461ffff169061325e565b60405180910390a1505050565b6002546001600160a01b031681565b600080610606846115ae565b905061061384828561061d565b9150505b92915050565b6000838383604051602001610634939291906130d2565b6040516020818303038152906040528051906020012090509392505050565b600081815260076020526040812054630100000090046001600160a01b0316610728576001546001600160a01b031661069e5760405162461bcd60e51b81526004016102eb9061341e565b60015460405163317daac560e01b81526001600160a01b0390911690819063317daac5906106d0908690600401613255565b60206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190612e37565b91505061073c565b506000818152600760205260409020600601545b919050565b6004546001600160a01b031681565b600081815260076020526040812054630100000090046001600160a01b031661081d576001546001600160a01b031661079b5760405162461bcd60e51b81526004016102eb9061341e565b6001546040516321993c3960e11b81526001600160a01b039091169081906343327872906107cd908690600401613255565b60206040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190612a6c565b5030919050565b60008181526007602052604081205460609190630100000090046001600160a01b0316610903576001546001600160a01b03166108735760405162461bcd60e51b81526004016102eb9061341e565b600154604051631191d71360e21b81526001600160a01b039091169081906346475c4c906108a5908790600401613255565b60006040518083038186803b1580156108bd57600080fd5b505afa1580156108d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108f99190810190612b01565b92509250506109e2565b60008381526007602081815260408084206008810154930180548251818502810185019093528083529094859463ffffffff16938592919084015b828210156109d6576000848152602090819020830180546040805182850281018501909152818152928301828280156109c257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116109855790505b50505050508152602001906001019061093e565b50505050915092509250505b915091565b600081815260076020526040902054630100000090046001600160a01b0316610a32576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb9061341e565b600081815260076020526040902054630100000090046001600160a01b03163314610a6f5760405162461bcd60e51b81526004016102eb90613514565b600081815260076020526040812060049081015460ff1690811115610a9057fe5b14610aad5760405162461bcd60e51b81526004016102eb906138ce565b6000818152600760205260409020546101009004600116610ae05760405162461bcd60e51b81526004016102eb90613496565b6000808281526007602052604090205462010000900460ff166005811115610b0457fe5b14610b215760405162461bcd60e51b81526004016102eb906139d8565b600081815260076020526040812060040154610b4690610100900460ff1660016119df565b60008381526007602052604090206004015490915060ff6201000090910481169082161015610be05760008281526007602052604090819020600401805461ff00191661010060ff851602179081905590517f2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c691610bd3918591600160501b900461ffff16908590613299565b60405180910390a1610c49565b600082815260076020526040908190206004018054600160ff1990911681179182905591517fe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f892610c40928692600160501b90910461ffff169190613270565b60405180910390a15b5050565b6000546001600160a01b03163314610c775760405162461bcd60e51b81526004016102eb906133f3565b610c80816119bc565b610c9c5760405162461bcd60e51b81526004016102eb906132ed565b600480546001600160a01b0319166001600160a01b0383161790556040517f215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b390610ce7908390613109565b60405180910390a150565b60035481565b6000600354118015610d1357506002546001600160a01b0316155b610d2f5760405162461bcd60e51b81526004016102eb906136e8565b604088015160009060ff166005811115610d4557fe5b6005811115610d5057fe5b1415610d6957610d64888787878786611a11565b610d7c565b8551610d7c908990898888888888611e5a565b5050505050505050565b6000546001600160a01b03163314610db05760405162461bcd60e51b81526004016102eb906133f3565b600060035411610dd25760405162461bcd60e51b81526004016102eb90613a49565b6002546001600160a01b031615610dfb5760405162461bcd60e51b81526004016102eb906134c2565b6001600160a01b038116301415610e245760405162461bcd60e51b81526004016102eb90613639565b610e2d816119bc565b610e495760405162461bcd60e51b81526004016102eb9061377a565b6000819050806001600160a01b0316630f15f4c06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b03861617905550506040517f1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a90610c409043908590613b16565b6003816004811115610efc57fe5b60ff161115610f1d5760405162461bcd60e51b81526004016102eb90613a95565b600082815260076020526040902054630100000090046001600160a01b0316610f68576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb9061341e565b600082815260076020526040902054630100000090046001600160a01b03163314610fa55760405162461bcd60e51b81526004016102eb90613514565b6000808381526007602052604090205462010000900460ff166005811115610fc957fe5b14610fe65760405162461bcd60e51b81526004016102eb906139d8565b60008281526007602052604081206004015460ff169081600481111561100857fe5b141580156110225750600381600481111561101f57fe5b14155b1561103f5760405162461bcd60e51b81526004016102eb90613687565b600381600481111561104d57fe5b14156110995760008381526007602052604090205460021661109457600082600481111561107757fe5b146110945760405162461bcd60e51b81526004016102eb90613561565b6110c7565b6000838152600760205260409020546002166110c75760405162461bcd60e51b81526004016102eb90613561565b8060048111156110d357fe5b8260048111156110df57fe5b14156110fd5760405162461bcd60e51b81526004016102eb906138f9565b600083815260076020526040902060049081018054849260ff1990911690600190849081111561112957fe5b0217905550600083815260076020526040908190206004015490517fe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8916105de918691600160501b900461ffff16908690613270565b6111876124c2565b60006111916124e0565b611199612507565b60006111a3612525565b6111ab6124c2565b600088815260076020526040812054630100000090046001600160a01b0316611292576001546001600160a01b03166111f65760405162461bcd60e51b81526004016102eb9061341e565b60015460405163023aa9ab60e61b81526001600160a01b03909116908190638eaa6ac090611228908d90600401613255565b60006040518083038186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261127c9190810190612cff565b9850985098509850985098509850985050611594565b6000898152600760209081526040918290208251606081018452815460ff8082168352610100820481169483019490945291939092908301916201000090041660058111156112dd57fe5b60ff169052815460408051600180860180546020600261010094831615949094026000190190911692909204601f81018390049092028301608090810190945260608301828152959e5063010000009094046001600160a01b03169c509093849390929091908401828280156113945780601f1061136957610100808354040283529160200191611394565b820191906000526020600020905b81548152906001019060200180831161137757829003601f168201915b5050509183525050600283810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b505050918352505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156114ba5780601f1061148f576101008083540402835291602001916114ba565b820191906000526020600020905b81548152906001019060200180831161149d57829003601f168201915b505050919092525050604080518082018252835463ffffffff600160b81b820481168352600160d81b909104166020808301919091526004850154835160a081018552610100820460ff90811682526201000083048116828501526301000000830481168287015264010000000083048116606080840191909152650100000000008404821660808401528651908101875261ffff600160301b850481168252600160401b8504811695820195909552600160501b840490941695840195909552600590960154949b509199509116965091945090925090505b919395975091939597565b6005546001600160a01b031681565b6001600160a01b038116600090815260066020526040812054611615576001546001600160a01b03166115e35750600061073c565b60015460405163795e58af60e11b81526001600160a01b0390911690819063f2bcb15e906106d0908690600401613109565b6001600160a01b03821660009081526006602052604090208054600019810190811061163d57fe5b60009182526020909120015460010192915050565b6004805460008581526007602052604090819020830154905163db246f2160e01b815286936001600160a01b0390931692839263db246f21926116a492600160501b90920461ffff1691339101613af9565b60206040518083038186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190612dff565b6117105760405162461bcd60e51b81526004016102eb90613a71565b60008363ffffffff16116117365760405162461bcd60e51b81526004016102eb90613758565b600085815260076020526040902054630100000090046001600160a01b0316611781576001546001600160a01b03166104165760405162461bcd60e51b81526004016102eb9061341e565b60008581526007602052604090206004015484516201000090910460ff16146117bc5760405162461bcd60e51b81526004016102eb90613441565b6002600086815260076020526040902060049081015460ff16908111156117df57fe5b1415801561180c5750600085815260076020526040902060049081015460ff168181111561180957fe5b14155b6118285760405162461bcd60e51b81526004016102eb906137a2565b6000858152600760208181526040909220865161184d93919092019190870190612543565b50600085815260076020526040902060088101805463ffffffff191663ffffffff86161790556004908101805460ff191660018302179055507f5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c856040516118b59190613255565b60405180910390a15050505050565b6000546001600160a01b031633146118ee5760405162461bcd60e51b81526004016102eb906133f3565b6001546001600160a01b0316156119175760405162461bcd60e51b81526004016102eb90613ac2565b600354156119375760405162461bcd60e51b81526004016102eb906138a3565b6001600160a01b038116156119b4576001600160a01b03811630141561196f5760405162461bcd60e51b81526004016102eb90613639565b611978816119bc565b6119945760405162461bcd60e51b81526004016102eb9061358c565b600180546001600160a01b0319166001600160a01b0383161790556119b9565b436003555b50565b6000806001600160a01b0383166119d757600091505061073c565b50503b151590565b600082820160ff8085169082161015611a0a5760405162461bcd60e51b81526004016102eb90613945565b9392505050565b85516001811615611a4057845163ffffffff16611a405760405162461bcd60e51b81526004016102eb90613862565b60028116611a6f57602085015163ffffffff16611a6f5760405162461bcd60e51b81526004016102eb906136b3565b855151611a8e5760405162461bcd60e51b81526004016102eb9061353c565b602086015151611ab05760405162461bcd60e51b81526004016102eb906135e5565b604086015151611ad25760405162461bcd60e51b81526004016102eb9061391e565b835160ff16611af35760405162461bcd60e51b81526004016102eb906133a3565b602084015160ff1615801590611b1457506064846001602002015160ff1611155b611b305760405162461bcd60e51b81526004016102eb906139ae565b604084015160ff16611b545760405162461bcd60e51b81526004016102eb90613662565b6000611b5f336115ae565b3360009081526006602052604081208054600181018083559394509283908110611b8557fe5b6000918252602082200184815591506001851615611ba557506000611ba9565b5060035b6000611bbe33868a60025b602002015161061d565b60008181526007602052604081209192508d906020020151815460ff191660ff9091161781558c60016020020151815461ff00191661010060ff90921691909102176301000000600160b81b031916336301000000021781558a60006020020151815463ffffffff909116600160b81b0263ffffffff60b81b199091161781558a60016020020151815463ffffffff909116600160d81b0263ffffffff60d81b199091161781558b60006020020151816001019080519060200190611c84929190612444565b506020808d01518051611c9d9260028501920190612444565b5060408c01518051611cb9916003840191602090910190612444565b50828160040160006101000a81548160ff02191690836004811115611cda57fe5b0217905550896000602002015160048201805460ff909216620100000262ff000019909216919091179055896001602002015160048201805460ff90921663010000000263ff00000019909216919091179055896002602002015160048201805460ff9092166401000000000264ff0000000019909216919091179055896003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055886000602002015160048201805461ffff909216600160301b0267ffff00000000000019909216919091179055886001602002015160048201805461ffff909216600160401b0261ffff60401b19909216919091179055886002602002015160048201805461ffff909216600160501b0261ffff60501b19909216919091179055600681018890557f2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e828a60026020020151604051611e4392919061325e565b60405180910390a150505050505050505050505050565b87516001811615611e7d5760405162461bcd60e51b81526004016102eb90613967565b6002811615611e9e5760405162461bcd60e51b81526004016102eb906139ff565b855163ffffffff16611ec25760405162461bcd60e51b81526004016102eb9061360c565b602086015163ffffffff16611ee95760405162461bcd60e51b81526004016102eb9061334f565b6040890151600560ff9091161115611f135760405162461bcd60e51b81526004016102eb906132b6565b60048116611f335760405162461bcd60e51b81526004016102eb9061370a565b6001600160a01b0387163314801590611f5457506001600160a01b03871615155b611f705760405162461bcd60e51b81526004016102eb90613318565b60055460405163c3c5a54760e01b81526001600160a01b039091169063c3c5a54790611fa0908a90600401613109565b60206040518083038186803b158015611fb857600080fd5b505afa158015611fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff09190612dff565b61200c5760405162461bcd60e51b81526004016102eb90613468565b6040516370a0823160e01b81526000906001600160a01b038916906370a082319061203b903390600401613109565b60206040518083038186803b15801561205357600080fd5b505afa158015612067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208b9190612e37565b9050600081116120ad5760405162461bcd60e51b81526004016102eb906135b9565b60008951116120ce5760405162461bcd60e51b81526004016102eb9061353c565b855160ff166120ef5760405162461bcd60e51b81526004016102eb906133a3565b602086015160ff161580159061211057506064866001602002015160ff1611155b61212c5760405162461bcd60e51b81526004016102eb906139ae565b604086015160ff166121505760405162461bcd60e51b81526004016102eb90613662565b600061215b896115ae565b6001600160a01b038a166000908152600660205260408120805460018101808355939450928390811061218a57fe5b6000918252602082200184815591506121a68c858b6002611bb4565b60008181526007602052604081209192508f906020020151815460ff191660ff9091161781558e60016020020151815460ff9091166101000261ff00199091161781558e6002602002015160ff1660058111156121ff57fe5b8154829062ff000019166201000083600581111561221957fe5b021790555080546301000000600160b81b03191663010000006001600160a01b038f16021781558b60006020020151815463ffffffff909116600160b81b0263ffffffff60b81b199091161781558b6001602002015181600001601b6101000a81548163ffffffff021916908363ffffffff1602179055508d8160010190805190602001906122a9929190612444565b506004810180546000919060ff191660018302179055508a6000602002015160048201805460ff909216620100000262ff0000199092169190911790558a6001602002015160048201805460ff90921663010000000263ff000000199092169190911790558a6002602002015160048201805460ff9092166401000000000264ff00000000199092169190911790558a6003602002015160048201805460ff909216650100000000000265ff000000000019909216919091179055896000602002015160048201805461ffff909216600160301b0267ffff00000000000019909216919091179055896001602002015160048201805461ffff909216600160401b0261ffff60401b19909216919091179055896002602002015160048201805461ffff909216600160501b0261ffff60501b1990921691909117905560058101899055600681018890557f2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e828b6002602002015160405161242b92919061325e565b60405180910390a1505050505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061248557805160ff19168380011785556124b2565b828001600101855582156124b2579182015b828111156124b2578251825591602001919060010190612497565b506124be92915061259c565b5090565b60405180606001604052806003906020820280368337509192915050565b60405180606001604052806003905b60608152602001906001900390816124ef5790505090565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b828054828255906000526020600020908101928215612590579160200282015b8281111561259057825180516125809184916020909101906125b1565b5091602001919060010190612563565b506124be92915061265c565b5b808211156124be576000815560010161259d565b828054828255906000526020600020906007016008900481019282156126505791602002820160005b8382111561261e57835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026125da565b801561264e5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261261e565b505b506124be929150612679565b808211156124be5760006126708282612695565b5060010161265c565b5b808211156124be57805463ffffffff1916815560010161267a565b5080546000825560070160089004906000526020600020908101906119b9919061259c565b803561061781613be1565b805161061781613be1565b600082601f8301126126e0578081fd5b6126ea6060613b2d565b9050808260005b600381101561271c5761270786833587016129e1565b835260209283019291909101906001016126f1565b50505092915050565b6000601f8381840112612736578182fd5b6127406060613b2d565b9150818360005b60038110156127b05781518601878582011261276257600080fd5b805161277561277082613b91565b613b2d565b81815260208a8184860101111561278b57600080fd5b61279a83828401838701613bb5565b9086529485019493909301925050600101612747565b5050505092915050565b600082601f8301126127ca578081fd5b6127d46060613b2d565b90508082846060850111156127e857600080fd5b60005b600381101561271c5781356127ff81613c03565b835260209283019291909101906001016127eb565b600082601f830112612824578081fd5b61282e6060613b2d565b905080828460608501111561284257600080fd5b60005b600381101561271c57815161285981613c03565b83526020928301929190910190600101612845565b600082601f83011261287e578081fd5b6128886040613b2d565b905080828460408501111561289c57600080fd5b60005b600281101561271c5781356128b381613c13565b8352602092830192919091019060010161289f565b600082601f8301126128d8578081fd5b6128e26040613b2d565b90508082846040850111156128f657600080fd5b60005b600281101561271c57815161290d81613c13565b835260209283019291909101906001016128f9565b600082601f830112612932578081fd5b61293c6080613b2d565b905080828460808501111561295057600080fd5b60005b600481101561271c57813561296781613c25565b83526020928301929190910190600101612953565b600082601f83011261298c578081fd5b61299660a0613b2d565b905080828460a0850111156129aa57600080fd5b60005b600581101561271c5781516129c181613c25565b835260209283019291909101906001016129ad565b805161061781613bf6565b600082601f8301126129f1578081fd5b81356129ff61277082613b91565b9150808252836020828501011115612a1657600080fd5b8060208401602084013760009082016020015292915050565b803561061781613c13565b805161061781613c13565b803561061781613c25565b600060208284031215612a61578081fd5b8135611a0a81613be1565b600060208284031215612a7d578081fd5b8151611a0a81613be1565b60008060408385031215612a9a578081fd5b8235612aa581613be1565b91506020830135612ab581613c03565b809150509250929050565b600080600060608486031215612ad4578081fd5b8335612adf81613be1565b9250602084013591506040840135612af681613c03565b809150509250925092565b60008060408385031215612b13578182fd5b825167ffffffffffffffff811115612b29578283fd5b8301601f81018513612b39578283fd5b8051612b4761277082613b54565b818152602080820191908401865b84811015612be657815186018a603f820112612b6f578889fd5b6020810151612b8061277082613b54565b80828252602082019150604084018e6040602086028701011115612ba2578c8dfd5b8c94505b83851015612bcd57612bb88f82612a3a565b83526001949094019360209283019201612ba6565b5087525050602094850194929092019150600101612b55565b505080955050505050612bfc8460208501612a3a565b90509250929050565b600080600080600080600080610200898b031215612c21578586fd5b89601f8a0112612c2f578586fd5b612c3c6127706003613b74565b808a60608c018d811115612c4e57898afd5b895b6003811015612c7857612c638f84612a45565b85526020948501949290920191600101612c50565b50829b50612c868e826126ba565b9a5050505050608089013567ffffffffffffffff811115612ca5578687fd5b612cb18b828c016126d0565b965050612cc18a60a08b0161286e565b9450612cd08a60e08b01612922565b9350612ce08a6101608b016127ba565b92506101c089013591506101e089013590509295985092959890939650565b600080600080600080600080610220898b031215612d1b578182fd5b89601f8a0112612d29578182fd5b612d336060613b2d565b808a60608c018d811115612d45578586fd5b855b6003811015612d70578251612d5b81613c25565b85526020948501949290920191600101612d47565b50829b50612d7e8e826126c5565b9a5050505050608089015167ffffffffffffffff811115612d9d578283fd5b612da98b828c01612725565b965050612db98a60a08b016128c8565b9450612dc88a60e08b016129d6565b9350612dd88a6101008b0161297c565b9250612de88a6101a08b01612814565b915061020089015190509295985092959890939650565b600060208284031215612e10578081fd5b81518015158114611a0a578182fd5b600060208284031215612e30578081fd5b5035919050565b600060208284031215612e48578081fd5b5051919050565b600080600060608486031215612e63578081fd5b83359250602084013567ffffffffffffffff811115612e80578182fd5b8401601f81018613612e90578182fd5b612e9d6127708235613b54565b81358152602080820191908301845b8435811015612f3e57813585018a603f820112612ec7578687fd5b6020810135612ed861277082613b54565b80828252602082019150604084018e6040602086028701011115612efa578a8bfd5b8a94505b83851015612f2557612f108f82612a2f565b83526001949094019360209283019201612efe565b5087525050602094850194929092019150600101612eac565b5050809450505050612f538560408601612a2f565b90509250925092565b60008060408385031215612f6e578182fd5b823591506020830135612ab581613bf6565b600080600060608486031215612f94578081fd5b83359250602084013567ffffffffffffffff80821115612fb2578283fd5b612fbe878388016129e1565b93506040860135915080821115612fd3578283fd5b50612fe0868287016129e1565b9150509250925092565b6000826060810183835b600381101561303d57838303875281518051808552602061301a82828801838601613bb5565b98890198601f91909101601f191694909401840193929092019150600101612ff4565b509095945050505050565b8060005b600381101561306f57815161ffff1684526020938401939091019060010161304c565b50505050565b8060005b600281101561306f57815163ffffffff16845260209384019390910190600101613079565b8060005b600581101561306f57815160ff168452602093840193909101906001016130a2565b600581106130ce57fe5b9052565b60609390931b6bffffffffffffffffffffffff19168352601483019190915260f01b6001600160f01b031916603482015260360190565b6001600160a01b0391909116815260200190565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561319d57878303605f19018552815180518085529087019087850190895b8181101561318857835163ffffffff1683529289019291890191600101613166565b50509587019593505090850190600101613144565b505080945050505063ffffffff841681840152509392505050565b6000610220828b835b60038110156131e357815160ff168352602092830192909101906001016131c1565b5050506001600160a01b038a166060840152608083018190526132088184018a612fea565b91505061321860a0830188613075565b61322560e08301876130c4565b61323361010083018661309e565b6132416101a0830185613048565b826102008301529998505050505050505050565b90815260200190565b91825261ffff16602082015260400190565b83815261ffff83166020820152606081016005831061328b57fe5b826040830152949350505050565b92835261ffff91909116602083015260ff16604082015260600190565b6020808252601b908201527f496e76616c69642063656e737573206f726967696e2076616c75650000000000604082015260600190565b602080825260119082015270496e76616c6964206e616d65737061636560781b604082015260600190565b6020808252601e908201527f496e76616c696420746f6b656e20636f6e747261637420616464726573730000604082015260600190565b602080825260129082015271125b9d985b1a5908189b1bd8dad0dbdd5b9d60721b604082015260600190565b6020808252600e908201526d139bc813595c9adb1948149bdbdd60921b604082015260600190565b60208082526010908201526f139bc81c5d595cdd1a5bdb90dbdd5b9d60821b604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b60208082526011908201527037b7363ca1b7b73a3930b1ba27bbb732b960791b604082015260600190565b602080825260099082015268139bdd08199bdd5b9960ba1b604082015260600190565b6020808252600d908201526c496e76616c69642074616c6c7960981b604082015260600190565b602080825260149082015273151bdad95b881b9bdd081c9959da5cdd195c995960621b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81b9bdd081cd95c9a585b60721b604082015260600190565b60208082526010908201526f416c726561647920696e61637469766560801b604082015260600190565b6020808252600e908201526d4e6f204d65726b6c65205472656560901b604082015260600190565b6020808252600e908201526d496e76616c696420656e7469747960901b604082015260600190565b6020808252600b908201526a4e6f206d6574616461746160a81b604082015260600190565b6020808252601190820152704e6f7420696e7465727275707469626c6560781b604082015260600190565b60208082526013908201527224b73b30b634b210383932b232b1b2b9b9b7b960691b604082015260600190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b6020808252600d908201526c139bc81b595c9adb19549bdbdd609a1b604082015260600190565b602080825260139082015272496e76616c696420737461727420626c6f636b60681b604082015260600190565b6020808252600f908201526e21b0b713ba1031329034ba39b2b63360891b604082015260600190565b6020808252600b908201526a4e6f206d617856616c756560a81b604082015260600190565b602080825260129082015271141c9bd8d95cdcc81d195c9b5a5b985d195960721b604082015260600190565b6020808252818101527f556e696e7465727275707469626c65206e6565647320626c6f636b436f756e74604082015260600190565b602080825260089082015267496e61637469766560c01b604082015260600190565b6020808252602e908201527f45564d2062617365642063656e7375736573206e6565642064796e616d69632060408201526d18d95b9cdd5cc8195b98589b195960921b606082015260800190565b6020808252600890820152674e6f20766f74657360c01b604082015260600190565b6020808252600e908201526d139bdd08184818dbdb9d1c9858dd60921b604082015260600190565b60208082526017908201527f43616e63656c6564206f7220616c726561647920736574000000000000000000604082015260600190565b6020808252600e908201526d416c72656164792061637469766560901b604082015260600190565b6020808252601d908201527f4e6f7420666f756e643a20547279206f6e207072656465636573736f72000000604082015260600190565b60208082526010908201526f526561642d6f6e6c792063656e73757360801b604082015260600190565b60208082526021908201527f4175746f207374617274207265717569726573206120737461727420626c6f636040820152606b60f81b606082015260800190565b602080825260119082015270105b1c9958591e481858dd1a5d985d1959607a1b604082015260600190565b60208082526011908201527050726f63657373206e6f7420726561647960781b604082015260600190565b6020808252600b908201526a26bab9ba103234b33332b960a91b604082015260600190565b6020808252600d908201526c4e6f206d65726b6c655472656560981b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b60208082526027908201527f4175746f207374617274206e6f7420616c6c6f776564206f6e2045564d2070726040820152666f63657373657360c81b606082015260800190565b60208082526010908201526f125b9d985b1a59081b585e10dbdd5b9d60821b604082015260600190565b6020808252600d908201526c2737ba1037b33316b1b430b4b760991b604082015260600190565b6020808252602a908201527f496e7465727275707469626c65206e6f7420616c6c6f776564206f6e2045564d6040820152692070726f63657373657360b01b606082015260800190565b6020808252600e908201526d4d7573742062652061637469766560901b604082015260600190565b6020808252600a90820152694e6f74206f7261636c6560b01b604082015260600190565b602080825260139082015272496e76616c69642073746174757320636f646560681b604082015260600190565b60208082526019908201527f416c7265616479206861732061207072656465636573736f7200000000000000604082015260600190565b61ffff9290921682526001600160a01b0316602082015260400190565b9182526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff81118282101715613b4c57600080fd5b604052919050565b600067ffffffffffffffff821115613b6a578081fd5b5060209081020190565b600067ffffffffffffffff821115613b8a578081fd5b5060200290565b600067ffffffffffffffff821115613ba7578081fd5b50601f01601f191660200190565b60005b83811015613bd0578181015183820152602001613bb8565b8381111561306f5750506000910152565b6001600160a01b03811681146119b957600080fd5b600581106119b957600080fd5b61ffff811681146119b957600080fd5b63ffffffff811681146119b957600080fd5b60ff811681146119b957600080fdfea26469706673582212204399ae84a15652de4c962f382e834c56c31afc188e16b0ee87016c3687c83f2e64736f6c634300060c0033"

// DeployProcesses deploys a new Ethereum contract, binding an instance of Processes to it.
func DeployProcesses(auth *bind.TransactOpts, backend bind.ContractBackend, predecessor common.Address, namespace common.Address, tokenStorageProof common.Address) (common.Address, *types.Transaction, *Processes, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProcessesBin), backend, predecessor, namespace, tokenStorageProof)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// Processes is an auto generated Go binding around an Ethereum contract.
type Processes struct {
	ProcessesCaller     // Read-only binding to the contract
	ProcessesTransactor // Write-only binding to the contract
	ProcessesFilterer   // Log filterer for contract events
}

// ProcessesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProcessesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProcessesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProcessesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProcessesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProcessesSession struct {
	Contract     *Processes        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProcessesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProcessesCallerSession struct {
	Contract *ProcessesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ProcessesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProcessesTransactorSession struct {
	Contract     *ProcessesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ProcessesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProcessesRaw struct {
	Contract *Processes // Generic contract binding to access the raw methods on
}

// ProcessesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProcessesCallerRaw struct {
	Contract *ProcessesCaller // Generic read-only contract binding to access the raw methods on
}

// ProcessesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProcessesTransactorRaw struct {
	Contract *ProcessesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProcesses creates a new instance of Processes, bound to a specific deployed contract.
func NewProcesses(address common.Address, backend bind.ContractBackend) (*Processes, error) {
	contract, err := bindProcesses(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Processes{ProcessesCaller: ProcessesCaller{contract: contract}, ProcessesTransactor: ProcessesTransactor{contract: contract}, ProcessesFilterer: ProcessesFilterer{contract: contract}}, nil
}

// NewProcessesCaller creates a new read-only instance of Processes, bound to a specific deployed contract.
func NewProcessesCaller(address common.Address, caller bind.ContractCaller) (*ProcessesCaller, error) {
	contract, err := bindProcesses(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesCaller{contract: contract}, nil
}

// NewProcessesTransactor creates a new write-only instance of Processes, bound to a specific deployed contract.
func NewProcessesTransactor(address common.Address, transactor bind.ContractTransactor) (*ProcessesTransactor, error) {
	contract, err := bindProcesses(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProcessesTransactor{contract: contract}, nil
}

// NewProcessesFilterer creates a new log filterer instance of Processes, bound to a specific deployed contract.
func NewProcessesFilterer(address common.Address, filterer bind.ContractFilterer) (*ProcessesFilterer, error) {
	contract, err := bindProcesses(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProcessesFilterer{contract: contract}, nil
}

// bindProcesses binds a generic wrapper to an already deployed contract.
func bindProcesses(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProcessesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.ProcessesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.ProcessesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Processes *ProcessesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Processes.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Processes *ProcessesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Processes *ProcessesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Processes.Contract.contract.Transact(opts, method, params...)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCaller) ActivationBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "activationBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// ActivationBlock is a free data retrieval call binding the contract method 0x80faa3d2.
//
// Solidity: function activationBlock() view returns(uint256)
func (_Processes *ProcessesCallerSession) ActivationBlock() (*big.Int, error) {
	return _Processes.Contract.ActivationBlock(&_Processes.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusMerkleRoot_censusMerkleTree, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesCaller) Get(opts *bind.CallOpts, processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusMerkleRootCensusMerkleTree                    [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "get", processId)

	outstruct := new(struct {
		ModeEnvelopeTypeCensusOrigin                                [3]uint8
		EntityAddress                                               common.Address
		MetadataCensusMerkleRootCensusMerkleTree                    [3]string
		StartBlockBlockCount                                        [2]uint32
		Status                                                      uint8
		QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
		MaxTotalCostCostExponentNamespace                           [3]uint16
		EvmBlockHeight                                              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ModeEnvelopeTypeCensusOrigin = out[0].([3]uint8)
	outstruct.EntityAddress = out[1].(common.Address)
	outstruct.MetadataCensusMerkleRootCensusMerkleTree = out[2].([3]string)
	outstruct.StartBlockBlockCount = out[3].([2]uint32)
	outstruct.Status = out[4].(uint8)
	outstruct.QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites = out[5].([5]uint8)
	outstruct.MaxTotalCostCostExponentNamespace = out[6].([3]uint16)
	outstruct.EvmBlockHeight = out[7].(*big.Int)

	return *outstruct, err

}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusMerkleRoot_censusMerkleTree, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusMerkleRootCensusMerkleTree                    [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) view returns(uint8[3] mode_envelopeType_censusOrigin, address entityAddress, string[3] metadata_censusMerkleRoot_censusMerkleTree, uint32[2] startBlock_blockCount, uint8 status, uint8[5] questionIndex_questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight)
func (_Processes *ProcessesCallerSession) Get(processId [32]byte) (struct {
	ModeEnvelopeTypeCensusOrigin                                [3]uint8
	EntityAddress                                               common.Address
	MetadataCensusMerkleRootCensusMerkleTree                    [3]string
	StartBlockBlockCount                                        [2]uint32
	Status                                                      uint8
	QuestionIndexQuestionCountMaxCountMaxValueMaxVoteOverwrites [5]uint8
	MaxTotalCostCostExponentNamespace                           [3]uint16
	EvmBlockHeight                                              *big.Int
}, error) {
	return _Processes.Contract.Get(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCaller) GetCreationInstance(opts *bind.CallOpts, processId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getCreationInstance", processId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetCreationInstance is a free data retrieval call binding the contract method 0x43327872.
//
// Solidity: function getCreationInstance(bytes32 processId) view returns(address)
func (_Processes *ProcessesCallerSession) GetCreationInstance(processId [32]byte) (common.Address, error) {
	return _Processes.Contract.GetCreationInstance(&_Processes.CallOpts, processId)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCaller) GetEntityProcessCount(opts *bind.CallOpts, entityAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getEntityProcessCount", entityAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) view returns(uint256)
func (_Processes *ProcessesCallerSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _Processes.Contract.GetEntityProcessCount(&_Processes.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesCaller) GetNextProcessId(opts *bind.CallOpts, entityAddress common.Address, namespace uint16) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getNextProcessId", entityAddress, namespace)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesSession) GetNextProcessId(entityAddress common.Address, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress, namespace)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x1f496623.
//
// Solidity: function getNextProcessId(address entityAddress, uint16 namespace) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetNextProcessId(entityAddress common.Address, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetNextProcessId(&_Processes.CallOpts, entityAddress, namespace)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCaller) GetParamsSignature(opts *bind.CallOpts, processId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getParamsSignature", processId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetParamsSignature is a free data retrieval call binding the contract method 0x317daac5.
//
// Solidity: function getParamsSignature(bytes32 processId) view returns(bytes32)
func (_Processes *ProcessesCallerSession) GetParamsSignature(processId [32]byte) ([32]byte, error) {
	return _Processes.Contract.GetParamsSignature(&_Processes.CallOpts, processId)
}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesCaller) GetProcessId(opts *bind.CallOpts, entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getProcessId", entityAddress, processCountIndex, namespace)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespace)
}

// GetProcessId is a free data retrieval call binding the contract method 0x305097bb.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex, uint16 namespace) pure returns(bytes32)
func (_Processes *ProcessesCallerSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int, namespace uint16) ([32]byte, error) {
	return _Processes.Contract.GetProcessId(&_Processes.CallOpts, entityAddress, processCountIndex, namespace)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesCaller) GetResults(opts *bind.CallOpts, processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "getResults", processId)

	outstruct := new(struct {
		Tally  [][]uint32
		Height uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Tally = out[0].([][]uint32)
	outstruct.Height = out[1].(uint32)

	return *outstruct, err

}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesSession) GetResults(processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	return _Processes.Contract.GetResults(&_Processes.CallOpts, processId)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) view returns(uint32[][] tally, uint32 height)
func (_Processes *ProcessesCallerSession) GetResults(processId [32]byte) (struct {
	Tally  [][]uint32
	Height uint32
}, error) {
	return _Processes.Contract.GetResults(&_Processes.CallOpts, processId)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCaller) NamespaceAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "namespaceAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// NamespaceAddress is a free data retrieval call binding the contract method 0x34a2cdbc.
//
// Solidity: function namespaceAddress() view returns(address)
func (_Processes *ProcessesCallerSession) NamespaceAddress() (common.Address, error) {
	return _Processes.Contract.NamespaceAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCaller) PredecessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "predecessorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// PredecessorAddress is a free data retrieval call binding the contract method 0x08ffce24.
//
// Solidity: function predecessorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) PredecessorAddress() (common.Address, error) {
	return _Processes.Contract.PredecessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCaller) SuccessorAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "successorAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// SuccessorAddress is a free data retrieval call binding the contract method 0x1d88c05b.
//
// Solidity: function successorAddress() view returns(address)
func (_Processes *ProcessesCallerSession) SuccessorAddress() (common.Address, error) {
	return _Processes.Contract.SuccessorAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCaller) TokenStorageProofAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Processes.contract.Call(opts, &out, "tokenStorageProofAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// TokenStorageProofAddress is a free data retrieval call binding the contract method 0xc876091f.
//
// Solidity: function tokenStorageProofAddress() view returns(address)
func (_Processes *ProcessesCallerSession) TokenStorageProofAddress() (common.Address, error) {
	return _Processes.Contract.TokenStorageProofAddress(&_Processes.CallOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactor) Activate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activate")
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// Activate is a paid mutator transaction binding the contract method 0x0f15f4c0.
//
// Solidity: function activate() returns()
func (_Processes *ProcessesTransactorSession) Activate() (*types.Transaction, error) {
	return _Processes.Contract.Activate(&_Processes.TransactOpts)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactor) ActivateSuccessor(opts *bind.TransactOpts, successor common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "activateSuccessor", successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// ActivateSuccessor is a paid mutator transaction binding the contract method 0x81c0de75.
//
// Solidity: function activateSuccessor(address successor) returns()
func (_Processes *ProcessesTransactorSession) ActivateSuccessor(successor common.Address) (*types.Transaction, error) {
	return _Processes.Contract.ActivateSuccessor(&_Processes.TransactOpts, successor)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactor) IncrementQuestionIndex(opts *bind.TransactOpts, processId [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "incrementQuestionIndex", processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// IncrementQuestionIndex is a paid mutator transaction binding the contract method 0x74da4adb.
//
// Solidity: function incrementQuestionIndex(bytes32 processId) returns()
func (_Processes *ProcessesTransactorSession) IncrementQuestionIndex(processId [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.IncrementQuestionIndex(&_Processes.TransactOpts, processId)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_merkleRoot_merkleTree, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesTransactor) NewProcess(opts *bind.TransactOpts, mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_merkleRoot_merkleTree [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "newProcess", mode_envelopeType_censusOrigin, tokenContractAddress, metadata_merkleRoot_merkleTree, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_merkleRoot_merkleTree, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_merkleRoot_merkleTree [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_merkleRoot_merkleTree, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// NewProcess is a paid mutator transaction binding the contract method 0x81bc8d90.
//
// Solidity: function newProcess(uint8[3] mode_envelopeType_censusOrigin, address tokenContractAddress, string[3] metadata_merkleRoot_merkleTree, uint32[2] startBlock_blockCount, uint8[4] questionCount_maxCount_maxValue_maxVoteOverwrites, uint16[3] maxTotalCost_costExponent_namespace, uint256 evmBlockHeight, bytes32 paramsSignature) returns()
func (_Processes *ProcessesTransactorSession) NewProcess(mode_envelopeType_censusOrigin [3]uint8, tokenContractAddress common.Address, metadata_merkleRoot_merkleTree [3]string, startBlock_blockCount [2]uint32, questionCount_maxCount_maxValue_maxVoteOverwrites [4]uint8, maxTotalCost_costExponent_namespace [3]uint16, evmBlockHeight *big.Int, paramsSignature [32]byte) (*types.Transaction, error) {
	return _Processes.Contract.NewProcess(&_Processes.TransactOpts, mode_envelopeType_censusOrigin, tokenContractAddress, metadata_merkleRoot_merkleTree, startBlock_blockCount, questionCount_maxCount_maxValue_maxVoteOverwrites, maxTotalCost_costExponent_namespace, evmBlockHeight, paramsSignature)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusMerkleRoot, string censusMerkleTree) returns()
func (_Processes *ProcessesTransactor) SetCensus(opts *bind.TransactOpts, processId [32]byte, censusMerkleRoot string, censusMerkleTree string) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setCensus", processId, censusMerkleRoot, censusMerkleTree)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusMerkleRoot, string censusMerkleTree) returns()
func (_Processes *ProcessesSession) SetCensus(processId [32]byte, censusMerkleRoot string, censusMerkleTree string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusMerkleRoot, censusMerkleTree)
}

// SetCensus is a paid mutator transaction binding the contract method 0x1795010d.
//
// Solidity: function setCensus(bytes32 processId, string censusMerkleRoot, string censusMerkleTree) returns()
func (_Processes *ProcessesTransactorSession) SetCensus(processId [32]byte, censusMerkleRoot string, censusMerkleTree string) (*types.Transaction, error) {
	return _Processes.Contract.SetCensus(&_Processes.TransactOpts, processId, censusMerkleRoot, censusMerkleTree)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesTransactor) SetNamespaceAddress(opts *bind.TransactOpts, namespace common.Address) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setNamespaceAddress", namespace)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesSession) SetNamespaceAddress(namespace common.Address) (*types.Transaction, error) {
	return _Processes.Contract.SetNamespaceAddress(&_Processes.TransactOpts, namespace)
}

// SetNamespaceAddress is a paid mutator transaction binding the contract method 0x77882df4.
//
// Solidity: function setNamespaceAddress(address namespace) returns()
func (_Processes *ProcessesTransactorSession) SetNamespaceAddress(namespace common.Address) (*types.Transaction, error) {
	return _Processes.Contract.SetNamespaceAddress(&_Processes.TransactOpts, namespace)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesTransactor) SetResults(opts *bind.TransactOpts, processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setResults", processId, tally, height)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesSession) SetResults(processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.Contract.SetResults(&_Processes.TransactOpts, processId, tally, height)
}

// SetResults is a paid mutator transaction binding the contract method 0xff5956ed.
//
// Solidity: function setResults(bytes32 processId, uint32[][] tally, uint32 height) returns()
func (_Processes *ProcessesTransactorSession) SetResults(processId [32]byte, tally [][]uint32, height uint32) (*types.Transaction, error) {
	return _Processes.Contract.SetResults(&_Processes.TransactOpts, processId, tally, height)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactor) SetStatus(opts *bind.TransactOpts, processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.contract.Transact(opts, "setStatus", processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// SetStatus is a paid mutator transaction binding the contract method 0x8de654ba.
//
// Solidity: function setStatus(bytes32 processId, uint8 newStatus) returns()
func (_Processes *ProcessesTransactorSession) SetStatus(processId [32]byte, newStatus uint8) (*types.Transaction, error) {
	return _Processes.Contract.SetStatus(&_Processes.TransactOpts, processId, newStatus)
}

// ProcessesActivatedIterator is returned from FilterActivated and is used to iterate over the raw logs and unpacked data for Activated events raised by the Processes contract.
type ProcessesActivatedIterator struct {
	Event *ProcessesActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivated represents a Activated event raised by the Processes contract.
type ProcessesActivated struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivated is a free log retrieval operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) FilterActivated(opts *bind.FilterOpts) (*ProcessesActivatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedIterator{contract: _Processes.contract, event: "Activated", logs: logs, sub: sub}, nil
}

// WatchActivated is a free log subscription operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) WatchActivated(opts *bind.WatchOpts, sink chan<- *ProcessesActivated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "Activated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivated)
				if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivated is a log parse operation binding the contract event 0x3ec796be1be7d03bff3a62b9fa594a60e947c1809bced06d929f145308ae57ce.
//
// Solidity: event Activated(uint256 blockNumber)
func (_Processes *ProcessesFilterer) ParseActivated(log types.Log) (*ProcessesActivated, error) {
	event := new(ProcessesActivated)
	if err := _Processes.contract.UnpackLog(event, "Activated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesActivatedSuccessorIterator is returned from FilterActivatedSuccessor and is used to iterate over the raw logs and unpacked data for ActivatedSuccessor events raised by the Processes contract.
type ProcessesActivatedSuccessorIterator struct {
	Event *ProcessesActivatedSuccessor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesActivatedSuccessorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesActivatedSuccessor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesActivatedSuccessor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesActivatedSuccessorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesActivatedSuccessorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesActivatedSuccessor represents a ActivatedSuccessor event raised by the Processes contract.
type ProcessesActivatedSuccessor struct {
	BlockNumber *big.Int
	Successor   common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterActivatedSuccessor is a free log retrieval operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) FilterActivatedSuccessor(opts *bind.FilterOpts) (*ProcessesActivatedSuccessorIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return &ProcessesActivatedSuccessorIterator{contract: _Processes.contract, event: "ActivatedSuccessor", logs: logs, sub: sub}, nil
}

// WatchActivatedSuccessor is a free log subscription operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) WatchActivatedSuccessor(opts *bind.WatchOpts, sink chan<- *ProcessesActivatedSuccessor) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ActivatedSuccessor")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesActivatedSuccessor)
				if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivatedSuccessor is a log parse operation binding the contract event 0x1f8bdb9825a71b7560200e2279fd4b503ac6814e369318e761928502882ee11a.
//
// Solidity: event ActivatedSuccessor(uint256 blockNumber, address successor)
func (_Processes *ProcessesFilterer) ParseActivatedSuccessor(log types.Log) (*ProcessesActivatedSuccessor, error) {
	event := new(ProcessesActivatedSuccessor)
	if err := _Processes.contract.UnpackLog(event, "ActivatedSuccessor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesCensusUpdatedIterator is returned from FilterCensusUpdated and is used to iterate over the raw logs and unpacked data for CensusUpdated events raised by the Processes contract.
type ProcessesCensusUpdatedIterator struct {
	Event *ProcessesCensusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesCensusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesCensusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesCensusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesCensusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesCensusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesCensusUpdated represents a CensusUpdated event raised by the Processes contract.
type ProcessesCensusUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCensusUpdated is a free log retrieval operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) FilterCensusUpdated(opts *bind.FilterOpts) (*ProcessesCensusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesCensusUpdatedIterator{contract: _Processes.contract, event: "CensusUpdated", logs: logs, sub: sub}, nil
}

// WatchCensusUpdated is a free log subscription operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) WatchCensusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesCensusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "CensusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesCensusUpdated)
				if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCensusUpdated is a log parse operation binding the contract event 0xe54b983ab80f8982da0bb83c59ca327de698b5d0780451eba9706b4ffe069211.
//
// Solidity: event CensusUpdated(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) ParseCensusUpdated(log types.Log) (*ProcessesCensusUpdated, error) {
	event := new(ProcessesCensusUpdated)
	if err := _Processes.contract.UnpackLog(event, "CensusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNamespaceAddressUpdatedIterator is returned from FilterNamespaceAddressUpdated and is used to iterate over the raw logs and unpacked data for NamespaceAddressUpdated events raised by the Processes contract.
type ProcessesNamespaceAddressUpdatedIterator struct {
	Event *ProcessesNamespaceAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNamespaceAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNamespaceAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNamespaceAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNamespaceAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNamespaceAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNamespaceAddressUpdated represents a NamespaceAddressUpdated event raised by the Processes contract.
type ProcessesNamespaceAddressUpdated struct {
	NamespaceAddr common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterNamespaceAddressUpdated is a free log retrieval operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) FilterNamespaceAddressUpdated(opts *bind.FilterOpts) (*ProcessesNamespaceAddressUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "NamespaceAddressUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesNamespaceAddressUpdatedIterator{contract: _Processes.contract, event: "NamespaceAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchNamespaceAddressUpdated is a free log subscription operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) WatchNamespaceAddressUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesNamespaceAddressUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "NamespaceAddressUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNamespaceAddressUpdated)
				if err := _Processes.contract.UnpackLog(event, "NamespaceAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNamespaceAddressUpdated is a log parse operation binding the contract event 0x215ba443e028811c105c1bb484176ce9d9eec24ea7fb85c67a6bff78a04302b3.
//
// Solidity: event NamespaceAddressUpdated(address namespaceAddr)
func (_Processes *ProcessesFilterer) ParseNamespaceAddressUpdated(log types.Log) (*ProcessesNamespaceAddressUpdated, error) {
	event := new(ProcessesNamespaceAddressUpdated)
	if err := _Processes.contract.UnpackLog(event, "NamespaceAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesNewProcessIterator is returned from FilterNewProcess and is used to iterate over the raw logs and unpacked data for NewProcess events raised by the Processes contract.
type ProcessesNewProcessIterator struct {
	Event *ProcessesNewProcess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesNewProcessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesNewProcess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesNewProcess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesNewProcessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesNewProcessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesNewProcess represents a NewProcess event raised by the Processes contract.
type ProcessesNewProcess struct {
	ProcessId [32]byte
	Namespace uint16
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewProcess is a free log retrieval operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) FilterNewProcess(opts *bind.FilterOpts) (*ProcessesNewProcessIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return &ProcessesNewProcessIterator{contract: _Processes.contract, event: "NewProcess", logs: logs, sub: sub}, nil
}

// WatchNewProcess is a free log subscription operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) WatchNewProcess(opts *bind.WatchOpts, sink chan<- *ProcessesNewProcess) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "NewProcess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesNewProcess)
				if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewProcess is a log parse operation binding the contract event 0x2399440b5a42cbc7ba215c9c176f7cd16b511a8727c1f277635f3fce4649156e.
//
// Solidity: event NewProcess(bytes32 processId, uint16 namespace)
func (_Processes *ProcessesFilterer) ParseNewProcess(log types.Log) (*ProcessesNewProcess, error) {
	event := new(ProcessesNewProcess)
	if err := _Processes.contract.UnpackLog(event, "NewProcess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesQuestionIndexUpdatedIterator is returned from FilterQuestionIndexUpdated and is used to iterate over the raw logs and unpacked data for QuestionIndexUpdated events raised by the Processes contract.
type ProcessesQuestionIndexUpdatedIterator struct {
	Event *ProcessesQuestionIndexUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesQuestionIndexUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesQuestionIndexUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesQuestionIndexUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesQuestionIndexUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesQuestionIndexUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesQuestionIndexUpdated represents a QuestionIndexUpdated event raised by the Processes contract.
type ProcessesQuestionIndexUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	NewIndex  uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterQuestionIndexUpdated is a free log retrieval operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) FilterQuestionIndexUpdated(opts *bind.FilterOpts) (*ProcessesQuestionIndexUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesQuestionIndexUpdatedIterator{contract: _Processes.contract, event: "QuestionIndexUpdated", logs: logs, sub: sub}, nil
}

// WatchQuestionIndexUpdated is a free log subscription operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) WatchQuestionIndexUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesQuestionIndexUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "QuestionIndexUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesQuestionIndexUpdated)
				if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuestionIndexUpdated is a log parse operation binding the contract event 0x2e4d6a3a868975a1e47c2ddc05451ebdececff07e59871dbc6cbaf9364aa06c6.
//
// Solidity: event QuestionIndexUpdated(bytes32 processId, uint16 namespace, uint8 newIndex)
func (_Processes *ProcessesFilterer) ParseQuestionIndexUpdated(log types.Log) (*ProcessesQuestionIndexUpdated, error) {
	event := new(ProcessesQuestionIndexUpdated)
	if err := _Processes.contract.UnpackLog(event, "QuestionIndexUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesResultsAvailableIterator is returned from FilterResultsAvailable and is used to iterate over the raw logs and unpacked data for ResultsAvailable events raised by the Processes contract.
type ProcessesResultsAvailableIterator struct {
	Event *ProcessesResultsAvailable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesResultsAvailableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesResultsAvailable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesResultsAvailable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesResultsAvailableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesResultsAvailableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesResultsAvailable represents a ResultsAvailable event raised by the Processes contract.
type ProcessesResultsAvailable struct {
	ProcessId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResultsAvailable is a free log retrieval operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) FilterResultsAvailable(opts *bind.FilterOpts) (*ProcessesResultsAvailableIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "ResultsAvailable")
	if err != nil {
		return nil, err
	}
	return &ProcessesResultsAvailableIterator{contract: _Processes.contract, event: "ResultsAvailable", logs: logs, sub: sub}, nil
}

// WatchResultsAvailable is a free log subscription operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) WatchResultsAvailable(opts *bind.WatchOpts, sink chan<- *ProcessesResultsAvailable) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "ResultsAvailable")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesResultsAvailable)
				if err := _Processes.contract.UnpackLog(event, "ResultsAvailable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultsAvailable is a log parse operation binding the contract event 0x5aff397e0d9bfad4e73dfd9c2da1d146ce7fe8cfd1a795dbf6b95b417236fa4c.
//
// Solidity: event ResultsAvailable(bytes32 processId)
func (_Processes *ProcessesFilterer) ParseResultsAvailable(log types.Log) (*ProcessesResultsAvailable, error) {
	event := new(ProcessesResultsAvailable)
	if err := _Processes.contract.UnpackLog(event, "ResultsAvailable", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProcessesStatusUpdatedIterator is returned from FilterStatusUpdated and is used to iterate over the raw logs and unpacked data for StatusUpdated events raised by the Processes contract.
type ProcessesStatusUpdatedIterator struct {
	Event *ProcessesStatusUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProcessesStatusUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProcessesStatusUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProcessesStatusUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProcessesStatusUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProcessesStatusUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProcessesStatusUpdated represents a StatusUpdated event raised by the Processes contract.
type ProcessesStatusUpdated struct {
	ProcessId [32]byte
	Namespace uint16
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStatusUpdated is a free log retrieval operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) FilterStatusUpdated(opts *bind.FilterOpts) (*ProcessesStatusUpdatedIterator, error) {

	logs, sub, err := _Processes.contract.FilterLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return &ProcessesStatusUpdatedIterator{contract: _Processes.contract, event: "StatusUpdated", logs: logs, sub: sub}, nil
}

// WatchStatusUpdated is a free log subscription operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) WatchStatusUpdated(opts *bind.WatchOpts, sink chan<- *ProcessesStatusUpdated) (event.Subscription, error) {

	logs, sub, err := _Processes.contract.WatchLogs(opts, "StatusUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProcessesStatusUpdated)
				if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusUpdated is a log parse operation binding the contract event 0xe64955704069c81c54f3fcca4da180a400f40da1bac10b68a9b42c753aa7a7f8.
//
// Solidity: event StatusUpdated(bytes32 processId, uint16 namespace, uint8 status)
func (_Processes *ProcessesFilterer) ParseStatusUpdated(log types.Log) (*ProcessesStatusUpdated, error) {
	event := new(ProcessesStatusUpdated)
	if err := _Processes.contract.UnpackLog(event, "StatusUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
