// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package votingProcess

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VotingProcessABI is the input ABI used to generate the binding from.
const VotingProcessABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getPrivateKey\",\"outputs\":[{\"name\":\"privateKey\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGenesis\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getResults\",\"outputs\":[{\"name\":\"results\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setGenesis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processes\",\"outputs\":[{\"name\":\"entityAddress\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"censusMerkleRoot\",\"type\":\"string\"},{\"name\":\"censusMerkleTree\",\"type\":\"string\"},{\"name\":\"voteEncryptionPrivateKey\",\"type\":\"string\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"results\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"merkleRoot\",\"type\":\"string\"},{\"name\":\"merkleTree\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getNextProcessId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"str1\",\"type\":\"string\"},{\"name\":\"str2\",\"type\":\"string\"}],\"name\":\"equalStrings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"entityProcessCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"oraclePublicKey\",\"type\":\"string\"}],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"validatorPublicKey\",\"type\":\"string\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"entityAddress\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"censusMerkleRoot\",\"type\":\"string\"},{\"name\":\"censusMerkleTree\",\"type\":\"string\"},{\"name\":\"voteEncryptionPrivateKey\",\"type\":\"string\"},{\"name\":\"canceled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"},{\"name\":\"privateKey\",\"type\":\"string\"}],\"name\":\"publishPrivateKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"validatorPublicKey\",\"type\":\"string\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"getProcessIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oraclePublicKey\",\"type\":\"string\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"processId\",\"type\":\"bytes32\"},{\"name\":\"results\",\"type\":\"string\"}],\"name\":\"publishResults\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setChainId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entityAddress\",\"type\":\"address\"}],\"name\":\"getEntityProcessCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"entityAddress\",\"type\":\"address\"},{\"name\":\"processCountIndex\",\"type\":\"uint256\"}],\"name\":\"getProcessId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"chainIdValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"genesis\",\"type\":\"string\"}],\"name\":\"GenesisChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainIdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entityAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"merkleTree\",\"type\":\"string\"}],\"name\":\"ProcessCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entityAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"processId\",\"type\":\"bytes32\"}],\"name\":\"ProcessCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"validatorPublicKey\",\"type\":\"string\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"validatorPublicKey\",\"type\":\"string\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oraclePublicKey\",\"type\":\"string\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oraclePublicKey\",\"type\":\"string\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"privateKey\",\"type\":\"string\"}],\"name\":\"PrivateKeyPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"processId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"results\",\"type\":\"string\"}],\"name\":\"ResultsPublished\",\"type\":\"event\"}]"

// VotingProcessBin is the compiled bytecode used for deploying new contracts.
const VotingProcessBin = `======= VotingProcess.sol:VotingProcess =======
Binary: 
60806040523480156200001157600080fd5b50604051602080620035a7833981018060405262000033919081019062000097565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060048190555050620000cd565b60006200008f8251620000c3565b905092915050565b600060208284031215620000aa57600080fd5b6000620000ba8482850162000081565b91505092915050565b6000819050919050565b6134ca80620000dd6000396000f3fe608060405234801561001057600080fd5b5060043610610175576000357c0100000000000000000000000000000000000000000000000000000000900480638ceb30c2116100e0578063c585ad9111610099578063c585ad9114610411578063c994bc8614610441578063ec8f670e1461045d578063ef0e2ff414610479578063f2bcb15e14610495578063f3b86c99146104c557610175565b80638ceb30c21461034e5780638eaa6ac01461036a578063a803dc4c1461039f578063b5da04f5146103bb578063b7ab4db5146103d7578063c4d252f5146103f557610175565b8063579e51c711610132578063579e51c7146102505780635d28560a1461028657806368141f2c146102a2578063791f0333146102d25780637c09faeb146103025780637f07492d1461033257610175565b8063182087921461017a5780631a43bcb5146101aa5780633408e470146101c857806340884c52146101e657806346475c4c1461020457806347bb3da714610234575b600080fd5b610194600480360361018f9190810190612920565b6104f5565b6040516101a19190613160565b60405180910390f35b6101b26105c5565b6040516101bf9190613160565b60405180910390f35b6101d0610667565b6040516101dd9190613304565b60405180910390f35b6101ee610671565b6040516101fb91906130d8565b60405180910390f35b61021e60048036036102199190810190612920565b61075a565b60405161022b9190613160565b60405180910390f35b61024e6004803603610249919081019061299d565b61082a565b005b61026a60048036036102659190810190612ae1565b6109f9565b60405161027d9796959493929190613046565b60405180910390f35b6102a0600480360361029b9190810190612a4a565b610d6f565b005b6102bc60048036036102b791908101906128bb565b6110ba565b6040516102c99190613115565b60405180910390f35b6102ec60048036036102e791908101906129de565b6110da565b6040516102f991906130fa565b60405180910390f35b61031c600480360361031791908101906128bb565b6111cd565b6040516103299190613304565b60405180910390f35b61034c60048036036103479190810190612b0a565b6111e5565b005b61036860048036036103639190810190612b0a565b61141d565b005b610384600480360361037f9190810190612920565b611653565b60405161039696959493929190612fc9565b60405180910390f35b6103b960048036036103b49190810190612949565b6119dd565b005b6103d560048036036103d0919081019061299d565b611b92565b005b6103df611c9c565b6040516103ec91906130d8565b60405180910390f35b61040f600480360361040a9190810190612920565b611d85565b005b61042b60048036036104269190810190612920565b611f53565b6040516104389190613304565b60405180910390f35b61045b6004803603610456919081019061299d565b611f70565b005b61047760048036036104729190810190612949565b61207a565b005b610493600480360361048e9190810190612ae1565b612349565b005b6104af60048036036104aa91908101906128bb565b612464565b6040516104bc9190613304565b60405180910390f35b6104df60048036036104da91908101906128e4565b6124ad565b6040516104ec9190613115565b60405180910390f35b6060600061050283611f53565b905060058181548110151561051357fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b5050505050915050919050565b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561065d5780601f106106325761010080835404028352916020019161065d565b820191906000526020600020905b81548152906001019060200180831161064057829003601f168201915b5050505050905090565b6000600454905090565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610751578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b505050505081526020019060010190610695565b50505050905090565b6060600061076783611f53565b905060058181548110151561077857fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b290613204565b60405180910390fd5b6000151561096360038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b5050505050836110da565b15151415156109a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099e906131c4565b60405180910390fd5b80600390805190602001906109bd929190612587565b507fb07272e5a32a7a57581e0409555209cb59b02e13b62da30135eb3b3431078e3660036040516109ee9190613182565b60405180910390a150565b600581815481101515610a0857fe5b90600052602060002090600702016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ada5780601f10610aaf57610100808354040283529160200191610ada565b820191906000526020600020905b815481529060010190602001808311610abd57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b785780601f10610b4d57610100808354040283529160200191610b78565b820191906000526020600020905b815481529060010190602001808311610b5b57829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb45780601f10610c8957610100808354040283529160200191610cb4565b820191906000526020600020905b815481529060010190602001808311610c9757829003601f168201915b5050505050908060050160009054906101000a900460ff1690806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d655780601f10610d3a57610100808354040283529160200191610d65565b820191906000526020600020905b815481529060010190602001808311610d4857829003601f168201915b5050505050905087565b60008351111515610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90613264565b60405180910390fd5b60008251111515610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290613284565b60405180910390fd5b60008151111515610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3890613244565b60405180910390fd5b60003390506000610e51826110ba565b9050610e5b612607565b60e0604051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815260200160206040519081016040528060008152508152602001600015158152602001602060405190810160405280600081525081525090506005819080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190610f5b92919061265d565b506040820151816002019080519060200190610f7892919061265d565b506060820151816003019080519060200190610f9592919061265d565b506080820151816004019080519060200190610fb292919061265d565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006019080519060200190610fef92919061265d565b505050506001600580549050036006600084815260200190815260200160002081905550600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508273ffffffffffffffffffffffffffffffffffffffff167f809f6d7403f260d87e5e9820dce1cbd03ed43803c14182fc7c466e6e86c5c50483866040516110aa929190613130565b60405180910390a2505050505050565b6000806110c683612464565b90506110d283826124ad565b915050919050565b6000816040516020018082805190602001908083835b60208310151561111557805182526020820191506020810190506020830392506110f0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b6020831015156111895780518252602082019150602081019050602083039250611164565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014905092915050565b60076020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126d90613204565b60405180910390fd5b61133160028381548110151561128857fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113265780601f106112fb57610100808354040283529160200191611326565b820191906000526020600020905b81548152906001019060200180831161130957829003601f168201915b5050505050826110da565b1515611372576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611369906132e4565b60405180910390fd5b600260016002805490500381548110151561138957fe5b906000526020600020016002838154811015156113a257fe5b9060005260206000200190805460018160011615610100020316600290046113cb9291906126dd565b5060028054809190600190036113e19190612764565b507fa28dc34059cd4716d51da651406dc8ff96399e3cf46725143a7f2855c68cf394816040516114119190613160565b60405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a590613204565b60405180910390fd5b6115696001838154811015156114c057fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561155e5780601f106115335761010080835404028352916020019161155e565b820191906000526020600020905b81548152906001019060200180831161154157829003601f168201915b5050505050826110da565b15156115aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a1906131e4565b60405180910390fd5b6001808080549050038154811015156115bf57fe5b906000526020600020016001838154811015156115d857fe5b9060005260206000200190805460018160011615610100020316600290046116019291906126dd565b5060018054809190600190036116179190612764565b507f53344ca00b011ca20d3dc9f1bb71ed60e097b598b9f35482879138cc15f28ef9816040516116479190613160565b60405180910390a15050565b60006060806060806000806006600089815260200190815260200160002054905060058181548110151561168357fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696506005818154811015156116c657fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561176b5780601f106117405761010080835404028352916020019161176b565b820191906000526020600020905b81548152906001019060200180831161174e57829003601f168201915b5050505050955060058181548110151561178157fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118265780601f106117fb57610100808354040283529160200191611826565b820191906000526020600020905b81548152906001019060200180831161180957829003601f168201915b5050505050945060058181548110151561183c57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118e15780601f106118b6576101008083540402835291602001916118e1565b820191906000526020600020905b8154815290600101906020018083116118c457829003601f168201915b505050505093506005818154811015156118f757fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561199c5780601f106119715761010080835404028352916020019161199c565b820191906000526020600020905b81548152906001019060200180831161197f57829003601f168201915b505050505092506005818154811015156119b257fe5b906000526020600020906007020160050160009054906101000a900460ff1691505091939550919395565b8160006119e982611f53565b90503373ffffffffffffffffffffffffffffffffffffffff16600582815481101515611a1157fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9290613224565b60405180910390fd5b6000611aa685611f53565b905060001515600582815481101515611abb57fe5b906000526020600020906007020160050160009054906101000a900460ff161515141515611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b15906132c4565b60405180910390fd5b83600582815481101515611b2e57fe5b90600052602060002090600702016004019080519060200190611b52929190612587565b50847f16e81256ba7e41ceea97db602f7c59414ba5110c3a6641245f6621279f62630185604051611b839190613160565b60405180910390a25050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1a90613204565b60405180910390fd5b6001819080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611c60929190612587565b50507f0eb17eb6d7f643e1f1a79af44e460fffabb6b2a8beff44bff08160d8d3403d3f81604051611c919190613160565b60405180910390a150565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015611d7c578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d685780601f10611d3d57610100808354040283529160200191611d68565b820191906000526020600020905b815481529060010190602001808311611d4b57829003601f168201915b505050505081526020019060010190611cc0565b50505050905090565b806000611d9182611f53565b90503373ffffffffffffffffffffffffffffffffffffffff16600582815481101515611db957fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3a90613224565b60405180910390fd5b6000611e4e84611f53565b905060001515600582815481101515611e6357fe5b906000526020600020906007020160050160009054906101000a900460ff161515141515611ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebd906132c4565b60405180910390fd5b6001600582815481101515611ed757fe5b906000526020600020906007020160050160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fa8a2eafb1f78e64e1c3921d10b28aad02d1fa21cba6bbc76b7e8601b19a9c08d85604051611f459190613115565b60405180910390a250505050565b600060066000838152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff890613204565b60405180910390fd5b600281908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061203e929190612587565b50507ff2cf567db3ebcbfcad45b1da586f6b7f795e01cad81a993c3cea865f259eec798160405161206f9190613160565b60405180910390a150565b81600061208682611f53565b90503373ffffffffffffffffffffffffffffffffffffffff166005828154811015156120ae57fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f90613224565b60405180910390fd5b600061214385611f53565b90506000151560058281548110151561215857fe5b906000526020600020906007020160050160009054906101000a900460ff1615151415156121bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b2906132c4565b60405180910390fd5b600015156122916005838154811015156121d157fe5b90600052602060002090600702016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122765780601f1061224b57610100808354040283529160200191612276565b820191906000526020600020905b81548152906001019060200180831161225957829003601f168201915b505050505060206040519081016040528060008152506110da565b15151415156122d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cc906131a4565b60405180910390fd5b836005828154811015156122e557fe5b90600052602060002090600702016006019080519060200190612309929190612587565b50847f8b7614f77555532e6b033ab6da00ac40495940598b8916b1c77a44351428ae0a8560405161233a9190613160565b60405180910390a25050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d190613204565b60405180910390fd5b8060045414151515612421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612418906132a4565b60405180910390fd5b806004819055507f5a4bfdb771a9b72401d824fd5b321058c7c69fbe4a7c209c37af285e6d061a8c6004546040516124599190613304565b60405180910390a150565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600082826003600454604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018380546001816001161561010002031660029004801561255b5780601f1061253957610100808354040283529182019161255b565b820191906000526020600020905b815481529060010190602001808311612547575b505082815260200194505050505060405160208183030381529060405280519060200120905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125c857805160ff19168380011785556125f6565b828001600101855582156125f6579182015b828111156125f55782518255916020019190600101906125da565b5b5090506126039190612790565b5090565b60e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001600015158152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061269e57805160ff19168380011785556126cc565b828001600101855582156126cc579182015b828111156126cb5782518255916020019190600101906126b0565b5b5090506126d99190612790565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106127165780548555612753565b8280016001018555821561275357600052602060002091601f016020900482015b82811115612752578254825591600101919060010190612737565b5b5090506127609190612790565b5090565b81548183558181111561278b5781836000526020600020918201910161278a91906127b5565b5b505050565b6127b291905b808211156127ae576000816000905550600101612796565b5090565b90565b6127de91905b808211156127da57600081816127d191906127e1565b506001016127bb565b5090565b90565b50805460018160011615610100020316600290046000825580601f106128075750612826565b601f0160209004906000526020600020908101906128259190612790565b5b50565b60006128358235613417565b905092915050565b60006128498235613429565b905092915050565b600082601f830112151561286457600080fd5b81356128776128728261334c565b61331f565b9150808252602083016020830185838301111561289357600080fd5b61289e83828461343d565b50505092915050565b60006128b38235613433565b905092915050565b6000602082840312156128cd57600080fd5b60006128db84828501612829565b91505092915050565b600080604083850312156128f757600080fd5b600061290585828601612829565b9250506020612916858286016128a7565b9150509250929050565b60006020828403121561293257600080fd5b60006129408482850161283d565b91505092915050565b6000806040838503121561295c57600080fd5b600061296a8582860161283d565b925050602083013567ffffffffffffffff81111561298757600080fd5b61299385828601612851565b9150509250929050565b6000602082840312156129af57600080fd5b600082013567ffffffffffffffff8111156129c957600080fd5b6129d584828501612851565b91505092915050565b600080604083850312156129f157600080fd5b600083013567ffffffffffffffff811115612a0b57600080fd5b612a1785828601612851565b925050602083013567ffffffffffffffff811115612a3457600080fd5b612a4085828601612851565b9150509250929050565b600080600060608486031215612a5f57600080fd5b600084013567ffffffffffffffff811115612a7957600080fd5b612a8586828701612851565b935050602084013567ffffffffffffffff811115612aa257600080fd5b612aae86828701612851565b925050604084013567ffffffffffffffff811115612acb57600080fd5b612ad786828701612851565b9150509250925092565b600060208284031215612af357600080fd5b6000612b01848285016128a7565b91505092915050565b60008060408385031215612b1d57600080fd5b6000612b2b858286016128a7565b925050602083013567ffffffffffffffff811115612b4857600080fd5b612b5485828601612851565b9150509250929050565b612b67816133c5565b82525050565b6000612b7882613397565b80845260208401935083602082028501612b9185613378565b60005b84811015612bca578383038852612bac838351612c2f565b9250612bb7826133b8565b9150602088019750600181019050612b94565b508196508694505050505092915050565b612be4816133d7565b82525050565b612bf3816133e3565b82525050565b6000612c04826133ad565b808452612c1881602086016020860161344c565b612c218161347f565b602085010191505092915050565b6000612c3a826133a2565b808452612c4e81602086016020860161344c565b612c578161347f565b602085010191505092915050565b600081546001811660008114612c825760018114612ca257612ce3565b607f600283041680865260ff198316602087015260408601935050612ce3565b60028204808652602086019550612cb885613385565b60005b82811015612cda57815481890152600182019150602081019050612cbb565b80880195505050505b505092915050565b6000602982527f5468652070726976617465206b657920686173206e6f74206265656e2072657660208301527f65616c65642079657400000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f4e65772067656e657369732063616e2774206265207468652073616d650000006020830152604082019050919050565b6000602882527f56616c696461746f7220746f2072656d6f766520646f6573206e6f74206d617460208301527f636820696e6465780000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f4f6e6c7920636f6e7472616374206f776e6572000000000000000000000000006020830152604082019050919050565b6000600e82527f496e76616c696420656e746974790000000000000000000000000000000000006020830152604082019050919050565b6000601082527f456d707479206d65726b6c6554726565000000000000000000000000000000006020830152604082019050919050565b6000600e82527f456d707479206d657461646174610000000000000000000000000000000000006020830152604082019050919050565b6000601082527f456d707479206d65726b6c65526f6f74000000000000000000000000000000006020830152604082019050919050565b6000601d82527f4e657720636861696e49642063616e2774206265207468652073616d650000006020830152604082019050919050565b6000601c82527f50726f63657373206d757374206e6f742062652063616e63656c6564000000006020830152604082019050919050565b6000602582527f4f7261636c6520746f2072656d6f766520646f6573206e6f74206d617463682060208301527f696e6465780000000000000000000000000000000000000000000000000000006040830152606082019050919050565b612fc38161340d565b82525050565b600060c082019050612fde6000830189612b5e565b8181036020830152612ff08188612bf9565b905081810360408301526130048187612bf9565b905081810360608301526130188186612bf9565b9050818103608083015261302c8185612bf9565b905061303b60a0830184612bdb565b979650505050505050565b600060e08201905061305b600083018a612b5e565b818103602083015261306d8189612c2f565b905081810360408301526130818188612c2f565b905081810360608301526130958187612c2f565b905081810360808301526130a98186612c2f565b90506130b860a0830185612bdb565b81810360c08301526130ca8184612c2f565b905098975050505050505050565b600060208201905081810360008301526130f28184612b6d565b905092915050565b600060208201905061310f6000830184612bdb565b92915050565b600060208201905061312a6000830184612bea565b92915050565b60006040820190506131456000830185612bea565b81810360208301526131578184612bf9565b90509392505050565b6000602082019050818103600083015261317a8184612bf9565b905092915050565b6000602082019050818103600083015261319c8184612c65565b905092915050565b600060208201905081810360008301526131bd81612ceb565b9050919050565b600060208201905081810360008301526131dd81612d48565b9050919050565b600060208201905081810360008301526131fd81612d7f565b9050919050565b6000602082019050818103600083015261321d81612ddc565b9050919050565b6000602082019050818103600083015261323d81612e13565b9050919050565b6000602082019050818103600083015261325d81612e4a565b9050919050565b6000602082019050818103600083015261327d81612e81565b9050919050565b6000602082019050818103600083015261329d81612eb8565b9050919050565b600060208201905081810360008301526132bd81612eef565b9050919050565b600060208201905081810360008301526132dd81612f26565b9050919050565b600060208201905081810360008301526132fd81612f5d565b9050919050565b60006020820190506133196000830184612fba565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561334257600080fd5b8060405250919050565b600067ffffffffffffffff82111561336357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60006133d0826133ed565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613422826133ed565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561346a57808201518184015260208101905061344f565b83811115613479576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820e47563f68294003914910652ddff4f1fc5622cd06f3ccc56e4a25429086048ec6c6578706572696d656e74616cf50037`

// DeployVotingProcess deploys a new Ethereum contract, binding an instance of VotingProcess to it.
func DeployVotingProcess(auth *bind.TransactOpts, backend bind.ContractBackend, chainIdValue *big.Int) (common.Address, *types.Transaction, *VotingProcess, error) {
	parsed, err := abi.JSON(strings.NewReader(VotingProcessABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VotingProcessBin), backend, chainIdValue)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VotingProcess{VotingProcessCaller: VotingProcessCaller{contract: contract}, VotingProcessTransactor: VotingProcessTransactor{contract: contract}, VotingProcessFilterer: VotingProcessFilterer{contract: contract}}, nil
}

// VotingProcess is an auto generated Go binding around an Ethereum contract.
type VotingProcess struct {
	VotingProcessCaller     // Read-only binding to the contract
	VotingProcessTransactor // Write-only binding to the contract
	VotingProcessFilterer   // Log filterer for contract events
}

// VotingProcessCaller is an auto generated read-only Go binding around an Ethereum contract.
type VotingProcessCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingProcessTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VotingProcessTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingProcessFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VotingProcessFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VotingProcessSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VotingProcessSession struct {
	Contract     *VotingProcess    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VotingProcessCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VotingProcessCallerSession struct {
	Contract *VotingProcessCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// VotingProcessTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VotingProcessTransactorSession struct {
	Contract     *VotingProcessTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// VotingProcessRaw is an auto generated low-level Go binding around an Ethereum contract.
type VotingProcessRaw struct {
	Contract *VotingProcess // Generic contract binding to access the raw methods on
}

// VotingProcessCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VotingProcessCallerRaw struct {
	Contract *VotingProcessCaller // Generic read-only contract binding to access the raw methods on
}

// VotingProcessTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VotingProcessTransactorRaw struct {
	Contract *VotingProcessTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVotingProcess creates a new instance of VotingProcess, bound to a specific deployed contract.
func NewVotingProcess(address common.Address, backend bind.ContractBackend) (*VotingProcess, error) {
	contract, err := bindVotingProcess(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VotingProcess{VotingProcessCaller: VotingProcessCaller{contract: contract}, VotingProcessTransactor: VotingProcessTransactor{contract: contract}, VotingProcessFilterer: VotingProcessFilterer{contract: contract}}, nil
}

// NewVotingProcessCaller creates a new read-only instance of VotingProcess, bound to a specific deployed contract.
func NewVotingProcessCaller(address common.Address, caller bind.ContractCaller) (*VotingProcessCaller, error) {
	contract, err := bindVotingProcess(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VotingProcessCaller{contract: contract}, nil
}

// NewVotingProcessTransactor creates a new write-only instance of VotingProcess, bound to a specific deployed contract.
func NewVotingProcessTransactor(address common.Address, transactor bind.ContractTransactor) (*VotingProcessTransactor, error) {
	contract, err := bindVotingProcess(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VotingProcessTransactor{contract: contract}, nil
}

// NewVotingProcessFilterer creates a new log filterer instance of VotingProcess, bound to a specific deployed contract.
func NewVotingProcessFilterer(address common.Address, filterer bind.ContractFilterer) (*VotingProcessFilterer, error) {
	contract, err := bindVotingProcess(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VotingProcessFilterer{contract: contract}, nil
}

// bindVotingProcess binds a generic wrapper to an already deployed contract.
func bindVotingProcess(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VotingProcessABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VotingProcess *VotingProcessRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _VotingProcess.Contract.VotingProcessCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VotingProcess *VotingProcessRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VotingProcess.Contract.VotingProcessTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VotingProcess *VotingProcessRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VotingProcess.Contract.VotingProcessTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VotingProcess *VotingProcessCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _VotingProcess.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VotingProcess *VotingProcessTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VotingProcess.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VotingProcess *VotingProcessTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VotingProcess.Contract.contract.Transact(opts, method, params...)
}

// EntityProcessCount is a free data retrieval call binding the contract method 0x7c09faeb.
//
// Solidity: function entityProcessCount(address ) constant returns(uint256)
func (_VotingProcess *VotingProcessCaller) EntityProcessCount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "entityProcessCount", arg0)
	return *ret0, err
}

// EntityProcessCount is a free data retrieval call binding the contract method 0x7c09faeb.
//
// Solidity: function entityProcessCount(address ) constant returns(uint256)
func (_VotingProcess *VotingProcessSession) EntityProcessCount(arg0 common.Address) (*big.Int, error) {
	return _VotingProcess.Contract.EntityProcessCount(&_VotingProcess.CallOpts, arg0)
}

// EntityProcessCount is a free data retrieval call binding the contract method 0x7c09faeb.
//
// Solidity: function entityProcessCount(address ) constant returns(uint256)
func (_VotingProcess *VotingProcessCallerSession) EntityProcessCount(arg0 common.Address) (*big.Int, error) {
	return _VotingProcess.Contract.EntityProcessCount(&_VotingProcess.CallOpts, arg0)
}

// EqualStrings is a free data retrieval call binding the contract method 0x791f0333.
//
// Solidity: function equalStrings(string str1, string str2) constant returns(bool)
func (_VotingProcess *VotingProcessCaller) EqualStrings(opts *bind.CallOpts, str1 string, str2 string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "equalStrings", str1, str2)
	return *ret0, err
}

// EqualStrings is a free data retrieval call binding the contract method 0x791f0333.
//
// Solidity: function equalStrings(string str1, string str2) constant returns(bool)
func (_VotingProcess *VotingProcessSession) EqualStrings(str1 string, str2 string) (bool, error) {
	return _VotingProcess.Contract.EqualStrings(&_VotingProcess.CallOpts, str1, str2)
}

// EqualStrings is a free data retrieval call binding the contract method 0x791f0333.
//
// Solidity: function equalStrings(string str1, string str2) constant returns(bool)
func (_VotingProcess *VotingProcessCallerSession) EqualStrings(str1 string, str2 string) (bool, error) {
	return _VotingProcess.Contract.EqualStrings(&_VotingProcess.CallOpts, str1, str2)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled)
func (_VotingProcess *VotingProcessCaller) Get(opts *bind.CallOpts, processId [32]byte) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
}, error) {
	ret := new(struct {
		EntityAddress            common.Address
		Metadata                 string
		CensusMerkleRoot         string
		CensusMerkleTree         string
		VoteEncryptionPrivateKey string
		Canceled                 bool
	})
	out := ret
	err := _VotingProcess.contract.Call(opts, out, "get", processId)
	return *ret, err
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled)
func (_VotingProcess *VotingProcessSession) Get(processId [32]byte) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
}, error) {
	return _VotingProcess.Contract.Get(&_VotingProcess.CallOpts, processId)
}

// Get is a free data retrieval call binding the contract method 0x8eaa6ac0.
//
// Solidity: function get(bytes32 processId) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled)
func (_VotingProcess *VotingProcessCallerSession) Get(processId [32]byte) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
}, error) {
	return _VotingProcess.Contract.Get(&_VotingProcess.CallOpts, processId)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() constant returns(uint256)
func (_VotingProcess *VotingProcessCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getChainId")
	return *ret0, err
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() constant returns(uint256)
func (_VotingProcess *VotingProcessSession) GetChainId() (*big.Int, error) {
	return _VotingProcess.Contract.GetChainId(&_VotingProcess.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() constant returns(uint256)
func (_VotingProcess *VotingProcessCallerSession) GetChainId() (*big.Int, error) {
	return _VotingProcess.Contract.GetChainId(&_VotingProcess.CallOpts)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) constant returns(uint256)
func (_VotingProcess *VotingProcessCaller) GetEntityProcessCount(opts *bind.CallOpts, entityAddress common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getEntityProcessCount", entityAddress)
	return *ret0, err
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) constant returns(uint256)
func (_VotingProcess *VotingProcessSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _VotingProcess.Contract.GetEntityProcessCount(&_VotingProcess.CallOpts, entityAddress)
}

// GetEntityProcessCount is a free data retrieval call binding the contract method 0xf2bcb15e.
//
// Solidity: function getEntityProcessCount(address entityAddress) constant returns(uint256)
func (_VotingProcess *VotingProcessCallerSession) GetEntityProcessCount(entityAddress common.Address) (*big.Int, error) {
	return _VotingProcess.Contract.GetEntityProcessCount(&_VotingProcess.CallOpts, entityAddress)
}

// GetGenesis is a free data retrieval call binding the contract method 0x1a43bcb5.
//
// Solidity: function getGenesis() constant returns(string)
func (_VotingProcess *VotingProcessCaller) GetGenesis(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getGenesis")
	return *ret0, err
}

// GetGenesis is a free data retrieval call binding the contract method 0x1a43bcb5.
//
// Solidity: function getGenesis() constant returns(string)
func (_VotingProcess *VotingProcessSession) GetGenesis() (string, error) {
	return _VotingProcess.Contract.GetGenesis(&_VotingProcess.CallOpts)
}

// GetGenesis is a free data retrieval call binding the contract method 0x1a43bcb5.
//
// Solidity: function getGenesis() constant returns(string)
func (_VotingProcess *VotingProcessCallerSession) GetGenesis() (string, error) {
	return _VotingProcess.Contract.GetGenesis(&_VotingProcess.CallOpts)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) constant returns(bytes32)
func (_VotingProcess *VotingProcessCaller) GetNextProcessId(opts *bind.CallOpts, entityAddress common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getNextProcessId", entityAddress)
	return *ret0, err
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) constant returns(bytes32)
func (_VotingProcess *VotingProcessSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _VotingProcess.Contract.GetNextProcessId(&_VotingProcess.CallOpts, entityAddress)
}

// GetNextProcessId is a free data retrieval call binding the contract method 0x68141f2c.
//
// Solidity: function getNextProcessId(address entityAddress) constant returns(bytes32)
func (_VotingProcess *VotingProcessCallerSession) GetNextProcessId(entityAddress common.Address) ([32]byte, error) {
	return _VotingProcess.Contract.GetNextProcessId(&_VotingProcess.CallOpts, entityAddress)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() constant returns(string[])
func (_VotingProcess *VotingProcessCaller) GetOracles(opts *bind.CallOpts) ([]string, error) {
	var (
		ret0 = new([]string)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getOracles")
	return *ret0, err
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() constant returns(string[])
func (_VotingProcess *VotingProcessSession) GetOracles() ([]string, error) {
	return _VotingProcess.Contract.GetOracles(&_VotingProcess.CallOpts)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() constant returns(string[])
func (_VotingProcess *VotingProcessCallerSession) GetOracles() ([]string, error) {
	return _VotingProcess.Contract.GetOracles(&_VotingProcess.CallOpts)
}

// GetPrivateKey is a free data retrieval call binding the contract method 0x18208792.
//
// Solidity: function getPrivateKey(bytes32 processId) constant returns(string privateKey)
func (_VotingProcess *VotingProcessCaller) GetPrivateKey(opts *bind.CallOpts, processId [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getPrivateKey", processId)
	return *ret0, err
}

// GetPrivateKey is a free data retrieval call binding the contract method 0x18208792.
//
// Solidity: function getPrivateKey(bytes32 processId) constant returns(string privateKey)
func (_VotingProcess *VotingProcessSession) GetPrivateKey(processId [32]byte) (string, error) {
	return _VotingProcess.Contract.GetPrivateKey(&_VotingProcess.CallOpts, processId)
}

// GetPrivateKey is a free data retrieval call binding the contract method 0x18208792.
//
// Solidity: function getPrivateKey(bytes32 processId) constant returns(string privateKey)
func (_VotingProcess *VotingProcessCallerSession) GetPrivateKey(processId [32]byte) (string, error) {
	return _VotingProcess.Contract.GetPrivateKey(&_VotingProcess.CallOpts, processId)
}

// GetProcessId is a free data retrieval call binding the contract method 0xf3b86c99.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex) constant returns(bytes32)
func (_VotingProcess *VotingProcessCaller) GetProcessId(opts *bind.CallOpts, entityAddress common.Address, processCountIndex *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getProcessId", entityAddress, processCountIndex)
	return *ret0, err
}

// GetProcessId is a free data retrieval call binding the contract method 0xf3b86c99.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex) constant returns(bytes32)
func (_VotingProcess *VotingProcessSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int) ([32]byte, error) {
	return _VotingProcess.Contract.GetProcessId(&_VotingProcess.CallOpts, entityAddress, processCountIndex)
}

// GetProcessId is a free data retrieval call binding the contract method 0xf3b86c99.
//
// Solidity: function getProcessId(address entityAddress, uint256 processCountIndex) constant returns(bytes32)
func (_VotingProcess *VotingProcessCallerSession) GetProcessId(entityAddress common.Address, processCountIndex *big.Int) ([32]byte, error) {
	return _VotingProcess.Contract.GetProcessId(&_VotingProcess.CallOpts, entityAddress, processCountIndex)
}

// GetProcessIndex is a free data retrieval call binding the contract method 0xc585ad91.
//
// Solidity: function getProcessIndex(bytes32 processId) constant returns(uint256)
func (_VotingProcess *VotingProcessCaller) GetProcessIndex(opts *bind.CallOpts, processId [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getProcessIndex", processId)
	return *ret0, err
}

// GetProcessIndex is a free data retrieval call binding the contract method 0xc585ad91.
//
// Solidity: function getProcessIndex(bytes32 processId) constant returns(uint256)
func (_VotingProcess *VotingProcessSession) GetProcessIndex(processId [32]byte) (*big.Int, error) {
	return _VotingProcess.Contract.GetProcessIndex(&_VotingProcess.CallOpts, processId)
}

// GetProcessIndex is a free data retrieval call binding the contract method 0xc585ad91.
//
// Solidity: function getProcessIndex(bytes32 processId) constant returns(uint256)
func (_VotingProcess *VotingProcessCallerSession) GetProcessIndex(processId [32]byte) (*big.Int, error) {
	return _VotingProcess.Contract.GetProcessIndex(&_VotingProcess.CallOpts, processId)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) constant returns(string results)
func (_VotingProcess *VotingProcessCaller) GetResults(opts *bind.CallOpts, processId [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getResults", processId)
	return *ret0, err
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) constant returns(string results)
func (_VotingProcess *VotingProcessSession) GetResults(processId [32]byte) (string, error) {
	return _VotingProcess.Contract.GetResults(&_VotingProcess.CallOpts, processId)
}

// GetResults is a free data retrieval call binding the contract method 0x46475c4c.
//
// Solidity: function getResults(bytes32 processId) constant returns(string results)
func (_VotingProcess *VotingProcessCallerSession) GetResults(processId [32]byte) (string, error) {
	return _VotingProcess.Contract.GetResults(&_VotingProcess.CallOpts, processId)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() constant returns(string[])
func (_VotingProcess *VotingProcessCaller) GetValidators(opts *bind.CallOpts) ([]string, error) {
	var (
		ret0 = new([]string)
	)
	out := ret0
	err := _VotingProcess.contract.Call(opts, out, "getValidators")
	return *ret0, err
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() constant returns(string[])
func (_VotingProcess *VotingProcessSession) GetValidators() ([]string, error) {
	return _VotingProcess.Contract.GetValidators(&_VotingProcess.CallOpts)
}

// GetValidators is a free data retrieval call binding the contract method 0xb7ab4db5.
//
// Solidity: function getValidators() constant returns(string[])
func (_VotingProcess *VotingProcessCallerSession) GetValidators() ([]string, error) {
	return _VotingProcess.Contract.GetValidators(&_VotingProcess.CallOpts)
}

// Processes is a free data retrieval call binding the contract method 0x579e51c7.
//
// Solidity: function processes(uint256 ) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled, string results)
func (_VotingProcess *VotingProcessCaller) Processes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
	Results                  string
}, error) {
	ret := new(struct {
		EntityAddress            common.Address
		Metadata                 string
		CensusMerkleRoot         string
		CensusMerkleTree         string
		VoteEncryptionPrivateKey string
		Canceled                 bool
		Results                  string
	})
	out := ret
	err := _VotingProcess.contract.Call(opts, out, "processes", arg0)
	return *ret, err
}

// Processes is a free data retrieval call binding the contract method 0x579e51c7.
//
// Solidity: function processes(uint256 ) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled, string results)
func (_VotingProcess *VotingProcessSession) Processes(arg0 *big.Int) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
	Results                  string
}, error) {
	return _VotingProcess.Contract.Processes(&_VotingProcess.CallOpts, arg0)
}

// Processes is a free data retrieval call binding the contract method 0x579e51c7.
//
// Solidity: function processes(uint256 ) constant returns(address entityAddress, string metadata, string censusMerkleRoot, string censusMerkleTree, string voteEncryptionPrivateKey, bool canceled, string results)
func (_VotingProcess *VotingProcessCallerSession) Processes(arg0 *big.Int) (struct {
	EntityAddress            common.Address
	Metadata                 string
	CensusMerkleRoot         string
	CensusMerkleTree         string
	VoteEncryptionPrivateKey string
	Canceled                 bool
	Results                  string
}, error) {
	return _VotingProcess.Contract.Processes(&_VotingProcess.CallOpts, arg0)
}

// AddOracle is a paid mutator transaction binding the contract method 0xc994bc86.
//
// Solidity: function addOracle(string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessTransactor) AddOracle(opts *bind.TransactOpts, oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "addOracle", oraclePublicKey)
}

// AddOracle is a paid mutator transaction binding the contract method 0xc994bc86.
//
// Solidity: function addOracle(string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessSession) AddOracle(oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.AddOracle(&_VotingProcess.TransactOpts, oraclePublicKey)
}

// AddOracle is a paid mutator transaction binding the contract method 0xc994bc86.
//
// Solidity: function addOracle(string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessTransactorSession) AddOracle(oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.AddOracle(&_VotingProcess.TransactOpts, oraclePublicKey)
}

// AddValidator is a paid mutator transaction binding the contract method 0xb5da04f5.
//
// Solidity: function addValidator(string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessTransactor) AddValidator(opts *bind.TransactOpts, validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "addValidator", validatorPublicKey)
}

// AddValidator is a paid mutator transaction binding the contract method 0xb5da04f5.
//
// Solidity: function addValidator(string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessSession) AddValidator(validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.AddValidator(&_VotingProcess.TransactOpts, validatorPublicKey)
}

// AddValidator is a paid mutator transaction binding the contract method 0xb5da04f5.
//
// Solidity: function addValidator(string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessTransactorSession) AddValidator(validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.AddValidator(&_VotingProcess.TransactOpts, validatorPublicKey)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 processId) returns()
func (_VotingProcess *VotingProcessTransactor) Cancel(opts *bind.TransactOpts, processId [32]byte) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "cancel", processId)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 processId) returns()
func (_VotingProcess *VotingProcessSession) Cancel(processId [32]byte) (*types.Transaction, error) {
	return _VotingProcess.Contract.Cancel(&_VotingProcess.TransactOpts, processId)
}

// Cancel is a paid mutator transaction binding the contract method 0xc4d252f5.
//
// Solidity: function cancel(bytes32 processId) returns()
func (_VotingProcess *VotingProcessTransactorSession) Cancel(processId [32]byte) (*types.Transaction, error) {
	return _VotingProcess.Contract.Cancel(&_VotingProcess.TransactOpts, processId)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string metadata, string merkleRoot, string merkleTree) returns()
func (_VotingProcess *VotingProcessTransactor) Create(opts *bind.TransactOpts, metadata string, merkleRoot string, merkleTree string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "create", metadata, merkleRoot, merkleTree)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string metadata, string merkleRoot, string merkleTree) returns()
func (_VotingProcess *VotingProcessSession) Create(metadata string, merkleRoot string, merkleTree string) (*types.Transaction, error) {
	return _VotingProcess.Contract.Create(&_VotingProcess.TransactOpts, metadata, merkleRoot, merkleTree)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string metadata, string merkleRoot, string merkleTree) returns()
func (_VotingProcess *VotingProcessTransactorSession) Create(metadata string, merkleRoot string, merkleTree string) (*types.Transaction, error) {
	return _VotingProcess.Contract.Create(&_VotingProcess.TransactOpts, metadata, merkleRoot, merkleTree)
}

// PublishPrivateKey is a paid mutator transaction binding the contract method 0xa803dc4c.
//
// Solidity: function publishPrivateKey(bytes32 processId, string privateKey) returns()
func (_VotingProcess *VotingProcessTransactor) PublishPrivateKey(opts *bind.TransactOpts, processId [32]byte, privateKey string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "publishPrivateKey", processId, privateKey)
}

// PublishPrivateKey is a paid mutator transaction binding the contract method 0xa803dc4c.
//
// Solidity: function publishPrivateKey(bytes32 processId, string privateKey) returns()
func (_VotingProcess *VotingProcessSession) PublishPrivateKey(processId [32]byte, privateKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.PublishPrivateKey(&_VotingProcess.TransactOpts, processId, privateKey)
}

// PublishPrivateKey is a paid mutator transaction binding the contract method 0xa803dc4c.
//
// Solidity: function publishPrivateKey(bytes32 processId, string privateKey) returns()
func (_VotingProcess *VotingProcessTransactorSession) PublishPrivateKey(processId [32]byte, privateKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.PublishPrivateKey(&_VotingProcess.TransactOpts, processId, privateKey)
}

// PublishResults is a paid mutator transaction binding the contract method 0xec8f670e.
//
// Solidity: function publishResults(bytes32 processId, string results) returns()
func (_VotingProcess *VotingProcessTransactor) PublishResults(opts *bind.TransactOpts, processId [32]byte, results string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "publishResults", processId, results)
}

// PublishResults is a paid mutator transaction binding the contract method 0xec8f670e.
//
// Solidity: function publishResults(bytes32 processId, string results) returns()
func (_VotingProcess *VotingProcessSession) PublishResults(processId [32]byte, results string) (*types.Transaction, error) {
	return _VotingProcess.Contract.PublishResults(&_VotingProcess.TransactOpts, processId, results)
}

// PublishResults is a paid mutator transaction binding the contract method 0xec8f670e.
//
// Solidity: function publishResults(bytes32 processId, string results) returns()
func (_VotingProcess *VotingProcessTransactorSession) PublishResults(processId [32]byte, results string) (*types.Transaction, error) {
	return _VotingProcess.Contract.PublishResults(&_VotingProcess.TransactOpts, processId, results)
}

// RemoveOracle is a paid mutator transaction binding the contract method 0x7f07492d.
//
// Solidity: function removeOracle(uint256 idx, string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessTransactor) RemoveOracle(opts *bind.TransactOpts, idx *big.Int, oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "removeOracle", idx, oraclePublicKey)
}

// RemoveOracle is a paid mutator transaction binding the contract method 0x7f07492d.
//
// Solidity: function removeOracle(uint256 idx, string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessSession) RemoveOracle(idx *big.Int, oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.RemoveOracle(&_VotingProcess.TransactOpts, idx, oraclePublicKey)
}

// RemoveOracle is a paid mutator transaction binding the contract method 0x7f07492d.
//
// Solidity: function removeOracle(uint256 idx, string oraclePublicKey) returns()
func (_VotingProcess *VotingProcessTransactorSession) RemoveOracle(idx *big.Int, oraclePublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.RemoveOracle(&_VotingProcess.TransactOpts, idx, oraclePublicKey)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x8ceb30c2.
//
// Solidity: function removeValidator(uint256 idx, string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessTransactor) RemoveValidator(opts *bind.TransactOpts, idx *big.Int, validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "removeValidator", idx, validatorPublicKey)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x8ceb30c2.
//
// Solidity: function removeValidator(uint256 idx, string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessSession) RemoveValidator(idx *big.Int, validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.RemoveValidator(&_VotingProcess.TransactOpts, idx, validatorPublicKey)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x8ceb30c2.
//
// Solidity: function removeValidator(uint256 idx, string validatorPublicKey) returns()
func (_VotingProcess *VotingProcessTransactorSession) RemoveValidator(idx *big.Int, validatorPublicKey string) (*types.Transaction, error) {
	return _VotingProcess.Contract.RemoveValidator(&_VotingProcess.TransactOpts, idx, validatorPublicKey)
}

// SetChainId is a paid mutator transaction binding the contract method 0xef0e2ff4.
//
// Solidity: function setChainId(uint256 newValue) returns()
func (_VotingProcess *VotingProcessTransactor) SetChainId(opts *bind.TransactOpts, newValue *big.Int) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "setChainId", newValue)
}

// SetChainId is a paid mutator transaction binding the contract method 0xef0e2ff4.
//
// Solidity: function setChainId(uint256 newValue) returns()
func (_VotingProcess *VotingProcessSession) SetChainId(newValue *big.Int) (*types.Transaction, error) {
	return _VotingProcess.Contract.SetChainId(&_VotingProcess.TransactOpts, newValue)
}

// SetChainId is a paid mutator transaction binding the contract method 0xef0e2ff4.
//
// Solidity: function setChainId(uint256 newValue) returns()
func (_VotingProcess *VotingProcessTransactorSession) SetChainId(newValue *big.Int) (*types.Transaction, error) {
	return _VotingProcess.Contract.SetChainId(&_VotingProcess.TransactOpts, newValue)
}

// SetGenesis is a paid mutator transaction binding the contract method 0x47bb3da7.
//
// Solidity: function setGenesis(string newValue) returns()
func (_VotingProcess *VotingProcessTransactor) SetGenesis(opts *bind.TransactOpts, newValue string) (*types.Transaction, error) {
	return _VotingProcess.contract.Transact(opts, "setGenesis", newValue)
}

// SetGenesis is a paid mutator transaction binding the contract method 0x47bb3da7.
//
// Solidity: function setGenesis(string newValue) returns()
func (_VotingProcess *VotingProcessSession) SetGenesis(newValue string) (*types.Transaction, error) {
	return _VotingProcess.Contract.SetGenesis(&_VotingProcess.TransactOpts, newValue)
}

// SetGenesis is a paid mutator transaction binding the contract method 0x47bb3da7.
//
// Solidity: function setGenesis(string newValue) returns()
func (_VotingProcess *VotingProcessTransactorSession) SetGenesis(newValue string) (*types.Transaction, error) {
	return _VotingProcess.Contract.SetGenesis(&_VotingProcess.TransactOpts, newValue)
}

// VotingProcessChainIdChangedIterator is returned from FilterChainIdChanged and is used to iterate over the raw logs and unpacked data for ChainIdChanged events raised by the VotingProcess contract.
type VotingProcessChainIdChangedIterator struct {
	Event *VotingProcessChainIdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessChainIdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessChainIdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessChainIdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessChainIdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessChainIdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessChainIdChanged represents a ChainIdChanged event raised by the VotingProcess contract.
type VotingProcessChainIdChanged struct {
	ChainId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChainIdChanged is a free log retrieval operation binding the contract event 0x5a4bfdb771a9b72401d824fd5b321058c7c69fbe4a7c209c37af285e6d061a8c.
//
// Solidity: event ChainIdChanged(uint256 chainId)
func (_VotingProcess *VotingProcessFilterer) FilterChainIdChanged(opts *bind.FilterOpts) (*VotingProcessChainIdChangedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ChainIdChanged")
	if err != nil {
		return nil, err
	}
	return &VotingProcessChainIdChangedIterator{contract: _VotingProcess.contract, event: "ChainIdChanged", logs: logs, sub: sub}, nil
}

// WatchChainIdChanged is a free log subscription operation binding the contract event 0x5a4bfdb771a9b72401d824fd5b321058c7c69fbe4a7c209c37af285e6d061a8c.
//
// Solidity: event ChainIdChanged(uint256 chainId)
func (_VotingProcess *VotingProcessFilterer) WatchChainIdChanged(opts *bind.WatchOpts, sink chan<- *VotingProcessChainIdChanged) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ChainIdChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessChainIdChanged)
				if err := _VotingProcess.contract.UnpackLog(event, "ChainIdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessGenesisChangedIterator is returned from FilterGenesisChanged and is used to iterate over the raw logs and unpacked data for GenesisChanged events raised by the VotingProcess contract.
type VotingProcessGenesisChangedIterator struct {
	Event *VotingProcessGenesisChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessGenesisChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessGenesisChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessGenesisChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessGenesisChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessGenesisChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessGenesisChanged represents a GenesisChanged event raised by the VotingProcess contract.
type VotingProcessGenesisChanged struct {
	Genesis string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGenesisChanged is a free log retrieval operation binding the contract event 0xb07272e5a32a7a57581e0409555209cb59b02e13b62da30135eb3b3431078e36.
//
// Solidity: event GenesisChanged(string genesis)
func (_VotingProcess *VotingProcessFilterer) FilterGenesisChanged(opts *bind.FilterOpts) (*VotingProcessGenesisChangedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "GenesisChanged")
	if err != nil {
		return nil, err
	}
	return &VotingProcessGenesisChangedIterator{contract: _VotingProcess.contract, event: "GenesisChanged", logs: logs, sub: sub}, nil
}

// WatchGenesisChanged is a free log subscription operation binding the contract event 0xb07272e5a32a7a57581e0409555209cb59b02e13b62da30135eb3b3431078e36.
//
// Solidity: event GenesisChanged(string genesis)
func (_VotingProcess *VotingProcessFilterer) WatchGenesisChanged(opts *bind.WatchOpts, sink chan<- *VotingProcessGenesisChanged) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "GenesisChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessGenesisChanged)
				if err := _VotingProcess.contract.UnpackLog(event, "GenesisChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessOracleAddedIterator is returned from FilterOracleAdded and is used to iterate over the raw logs and unpacked data for OracleAdded events raised by the VotingProcess contract.
type VotingProcessOracleAddedIterator struct {
	Event *VotingProcessOracleAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessOracleAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessOracleAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessOracleAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessOracleAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessOracleAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessOracleAdded represents a OracleAdded event raised by the VotingProcess contract.
type VotingProcessOracleAdded struct {
	OraclePublicKey string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOracleAdded is a free log retrieval operation binding the contract event 0xf2cf567db3ebcbfcad45b1da586f6b7f795e01cad81a993c3cea865f259eec79.
//
// Solidity: event OracleAdded(string oraclePublicKey)
func (_VotingProcess *VotingProcessFilterer) FilterOracleAdded(opts *bind.FilterOpts) (*VotingProcessOracleAddedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "OracleAdded")
	if err != nil {
		return nil, err
	}
	return &VotingProcessOracleAddedIterator{contract: _VotingProcess.contract, event: "OracleAdded", logs: logs, sub: sub}, nil
}

// WatchOracleAdded is a free log subscription operation binding the contract event 0xf2cf567db3ebcbfcad45b1da586f6b7f795e01cad81a993c3cea865f259eec79.
//
// Solidity: event OracleAdded(string oraclePublicKey)
func (_VotingProcess *VotingProcessFilterer) WatchOracleAdded(opts *bind.WatchOpts, sink chan<- *VotingProcessOracleAdded) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "OracleAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessOracleAdded)
				if err := _VotingProcess.contract.UnpackLog(event, "OracleAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessOracleRemovedIterator is returned from FilterOracleRemoved and is used to iterate over the raw logs and unpacked data for OracleRemoved events raised by the VotingProcess contract.
type VotingProcessOracleRemovedIterator struct {
	Event *VotingProcessOracleRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessOracleRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessOracleRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessOracleRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessOracleRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessOracleRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessOracleRemoved represents a OracleRemoved event raised by the VotingProcess contract.
type VotingProcessOracleRemoved struct {
	OraclePublicKey string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOracleRemoved is a free log retrieval operation binding the contract event 0xa28dc34059cd4716d51da651406dc8ff96399e3cf46725143a7f2855c68cf394.
//
// Solidity: event OracleRemoved(string oraclePublicKey)
func (_VotingProcess *VotingProcessFilterer) FilterOracleRemoved(opts *bind.FilterOpts) (*VotingProcessOracleRemovedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "OracleRemoved")
	if err != nil {
		return nil, err
	}
	return &VotingProcessOracleRemovedIterator{contract: _VotingProcess.contract, event: "OracleRemoved", logs: logs, sub: sub}, nil
}

// WatchOracleRemoved is a free log subscription operation binding the contract event 0xa28dc34059cd4716d51da651406dc8ff96399e3cf46725143a7f2855c68cf394.
//
// Solidity: event OracleRemoved(string oraclePublicKey)
func (_VotingProcess *VotingProcessFilterer) WatchOracleRemoved(opts *bind.WatchOpts, sink chan<- *VotingProcessOracleRemoved) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "OracleRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessOracleRemoved)
				if err := _VotingProcess.contract.UnpackLog(event, "OracleRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessPrivateKeyPublishedIterator is returned from FilterPrivateKeyPublished and is used to iterate over the raw logs and unpacked data for PrivateKeyPublished events raised by the VotingProcess contract.
type VotingProcessPrivateKeyPublishedIterator struct {
	Event *VotingProcessPrivateKeyPublished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessPrivateKeyPublishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessPrivateKeyPublished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessPrivateKeyPublished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessPrivateKeyPublishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessPrivateKeyPublishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessPrivateKeyPublished represents a PrivateKeyPublished event raised by the VotingProcess contract.
type VotingProcessPrivateKeyPublished struct {
	ProcessId  [32]byte
	PrivateKey string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPrivateKeyPublished is a free log retrieval operation binding the contract event 0x16e81256ba7e41ceea97db602f7c59414ba5110c3a6641245f6621279f626301.
//
// Solidity: event PrivateKeyPublished(bytes32 indexed processId, string privateKey)
func (_VotingProcess *VotingProcessFilterer) FilterPrivateKeyPublished(opts *bind.FilterOpts, processId [][32]byte) (*VotingProcessPrivateKeyPublishedIterator, error) {

	var processIdRule []interface{}
	for _, processIdItem := range processId {
		processIdRule = append(processIdRule, processIdItem)
	}

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "PrivateKeyPublished", processIdRule)
	if err != nil {
		return nil, err
	}
	return &VotingProcessPrivateKeyPublishedIterator{contract: _VotingProcess.contract, event: "PrivateKeyPublished", logs: logs, sub: sub}, nil
}

// WatchPrivateKeyPublished is a free log subscription operation binding the contract event 0x16e81256ba7e41ceea97db602f7c59414ba5110c3a6641245f6621279f626301.
//
// Solidity: event PrivateKeyPublished(bytes32 indexed processId, string privateKey)
func (_VotingProcess *VotingProcessFilterer) WatchPrivateKeyPublished(opts *bind.WatchOpts, sink chan<- *VotingProcessPrivateKeyPublished, processId [][32]byte) (event.Subscription, error) {

	var processIdRule []interface{}
	for _, processIdItem := range processId {
		processIdRule = append(processIdRule, processIdItem)
	}

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "PrivateKeyPublished", processIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessPrivateKeyPublished)
				if err := _VotingProcess.contract.UnpackLog(event, "PrivateKeyPublished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessProcessCanceledIterator is returned from FilterProcessCanceled and is used to iterate over the raw logs and unpacked data for ProcessCanceled events raised by the VotingProcess contract.
type VotingProcessProcessCanceledIterator struct {
	Event *VotingProcessProcessCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessProcessCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessProcessCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessProcessCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessProcessCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessProcessCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessProcessCanceled represents a ProcessCanceled event raised by the VotingProcess contract.
type VotingProcessProcessCanceled struct {
	EntityAddress common.Address
	ProcessId     [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProcessCanceled is a free log retrieval operation binding the contract event 0xa8a2eafb1f78e64e1c3921d10b28aad02d1fa21cba6bbc76b7e8601b19a9c08d.
//
// Solidity: event ProcessCanceled(address indexed entityAddress, bytes32 processId)
func (_VotingProcess *VotingProcessFilterer) FilterProcessCanceled(opts *bind.FilterOpts, entityAddress []common.Address) (*VotingProcessProcessCanceledIterator, error) {

	var entityAddressRule []interface{}
	for _, entityAddressItem := range entityAddress {
		entityAddressRule = append(entityAddressRule, entityAddressItem)
	}

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ProcessCanceled", entityAddressRule)
	if err != nil {
		return nil, err
	}
	return &VotingProcessProcessCanceledIterator{contract: _VotingProcess.contract, event: "ProcessCanceled", logs: logs, sub: sub}, nil
}

// WatchProcessCanceled is a free log subscription operation binding the contract event 0xa8a2eafb1f78e64e1c3921d10b28aad02d1fa21cba6bbc76b7e8601b19a9c08d.
//
// Solidity: event ProcessCanceled(address indexed entityAddress, bytes32 processId)
func (_VotingProcess *VotingProcessFilterer) WatchProcessCanceled(opts *bind.WatchOpts, sink chan<- *VotingProcessProcessCanceled, entityAddress []common.Address) (event.Subscription, error) {

	var entityAddressRule []interface{}
	for _, entityAddressItem := range entityAddress {
		entityAddressRule = append(entityAddressRule, entityAddressItem)
	}

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ProcessCanceled", entityAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessProcessCanceled)
				if err := _VotingProcess.contract.UnpackLog(event, "ProcessCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessProcessCreatedIterator is returned from FilterProcessCreated and is used to iterate over the raw logs and unpacked data for ProcessCreated events raised by the VotingProcess contract.
type VotingProcessProcessCreatedIterator struct {
	Event *VotingProcessProcessCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessProcessCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessProcessCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessProcessCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessProcessCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessProcessCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessProcessCreated represents a ProcessCreated event raised by the VotingProcess contract.
type VotingProcessProcessCreated struct {
	EntityAddress common.Address
	ProcessId     [32]byte
	MerkleTree    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProcessCreated is a free log retrieval operation binding the contract event 0x809f6d7403f260d87e5e9820dce1cbd03ed43803c14182fc7c466e6e86c5c504.
//
// Solidity: event ProcessCreated(address indexed entityAddress, bytes32 processId, string merkleTree)
func (_VotingProcess *VotingProcessFilterer) FilterProcessCreated(opts *bind.FilterOpts, entityAddress []common.Address) (*VotingProcessProcessCreatedIterator, error) {

	var entityAddressRule []interface{}
	for _, entityAddressItem := range entityAddress {
		entityAddressRule = append(entityAddressRule, entityAddressItem)
	}

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ProcessCreated", entityAddressRule)
	if err != nil {
		return nil, err
	}
	return &VotingProcessProcessCreatedIterator{contract: _VotingProcess.contract, event: "ProcessCreated", logs: logs, sub: sub}, nil
}

// WatchProcessCreated is a free log subscription operation binding the contract event 0x809f6d7403f260d87e5e9820dce1cbd03ed43803c14182fc7c466e6e86c5c504.
//
// Solidity: event ProcessCreated(address indexed entityAddress, bytes32 processId, string merkleTree)
func (_VotingProcess *VotingProcessFilterer) WatchProcessCreated(opts *bind.WatchOpts, sink chan<- *VotingProcessProcessCreated, entityAddress []common.Address) (event.Subscription, error) {

	var entityAddressRule []interface{}
	for _, entityAddressItem := range entityAddress {
		entityAddressRule = append(entityAddressRule, entityAddressItem)
	}

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ProcessCreated", entityAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessProcessCreated)
				if err := _VotingProcess.contract.UnpackLog(event, "ProcessCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessResultsPublishedIterator is returned from FilterResultsPublished and is used to iterate over the raw logs and unpacked data for ResultsPublished events raised by the VotingProcess contract.
type VotingProcessResultsPublishedIterator struct {
	Event *VotingProcessResultsPublished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessResultsPublishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessResultsPublished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessResultsPublished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessResultsPublishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessResultsPublishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessResultsPublished represents a ResultsPublished event raised by the VotingProcess contract.
type VotingProcessResultsPublished struct {
	ProcessId [32]byte
	Results   string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterResultsPublished is a free log retrieval operation binding the contract event 0x8b7614f77555532e6b033ab6da00ac40495940598b8916b1c77a44351428ae0a.
//
// Solidity: event ResultsPublished(bytes32 indexed processId, string results)
func (_VotingProcess *VotingProcessFilterer) FilterResultsPublished(opts *bind.FilterOpts, processId [][32]byte) (*VotingProcessResultsPublishedIterator, error) {

	var processIdRule []interface{}
	for _, processIdItem := range processId {
		processIdRule = append(processIdRule, processIdItem)
	}

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ResultsPublished", processIdRule)
	if err != nil {
		return nil, err
	}
	return &VotingProcessResultsPublishedIterator{contract: _VotingProcess.contract, event: "ResultsPublished", logs: logs, sub: sub}, nil
}

// WatchResultsPublished is a free log subscription operation binding the contract event 0x8b7614f77555532e6b033ab6da00ac40495940598b8916b1c77a44351428ae0a.
//
// Solidity: event ResultsPublished(bytes32 indexed processId, string results)
func (_VotingProcess *VotingProcessFilterer) WatchResultsPublished(opts *bind.WatchOpts, sink chan<- *VotingProcessResultsPublished, processId [][32]byte) (event.Subscription, error) {

	var processIdRule []interface{}
	for _, processIdItem := range processId {
		processIdRule = append(processIdRule, processIdItem)
	}

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ResultsPublished", processIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessResultsPublished)
				if err := _VotingProcess.contract.UnpackLog(event, "ResultsPublished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessValidatorAddedIterator is returned from FilterValidatorAdded and is used to iterate over the raw logs and unpacked data for ValidatorAdded events raised by the VotingProcess contract.
type VotingProcessValidatorAddedIterator struct {
	Event *VotingProcessValidatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessValidatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessValidatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessValidatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessValidatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessValidatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessValidatorAdded represents a ValidatorAdded event raised by the VotingProcess contract.
type VotingProcessValidatorAdded struct {
	ValidatorPublicKey string
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterValidatorAdded is a free log retrieval operation binding the contract event 0x0eb17eb6d7f643e1f1a79af44e460fffabb6b2a8beff44bff08160d8d3403d3f.
//
// Solidity: event ValidatorAdded(string validatorPublicKey)
func (_VotingProcess *VotingProcessFilterer) FilterValidatorAdded(opts *bind.FilterOpts) (*VotingProcessValidatorAddedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ValidatorAdded")
	if err != nil {
		return nil, err
	}
	return &VotingProcessValidatorAddedIterator{contract: _VotingProcess.contract, event: "ValidatorAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorAdded is a free log subscription operation binding the contract event 0x0eb17eb6d7f643e1f1a79af44e460fffabb6b2a8beff44bff08160d8d3403d3f.
//
// Solidity: event ValidatorAdded(string validatorPublicKey)
func (_VotingProcess *VotingProcessFilterer) WatchValidatorAdded(opts *bind.WatchOpts, sink chan<- *VotingProcessValidatorAdded) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ValidatorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessValidatorAdded)
				if err := _VotingProcess.contract.UnpackLog(event, "ValidatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// VotingProcessValidatorRemovedIterator is returned from FilterValidatorRemoved and is used to iterate over the raw logs and unpacked data for ValidatorRemoved events raised by the VotingProcess contract.
type VotingProcessValidatorRemovedIterator struct {
	Event *VotingProcessValidatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VotingProcessValidatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VotingProcessValidatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VotingProcessValidatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VotingProcessValidatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VotingProcessValidatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VotingProcessValidatorRemoved represents a ValidatorRemoved event raised by the VotingProcess contract.
type VotingProcessValidatorRemoved struct {
	ValidatorPublicKey string
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterValidatorRemoved is a free log retrieval operation binding the contract event 0x53344ca00b011ca20d3dc9f1bb71ed60e097b598b9f35482879138cc15f28ef9.
//
// Solidity: event ValidatorRemoved(string validatorPublicKey)
func (_VotingProcess *VotingProcessFilterer) FilterValidatorRemoved(opts *bind.FilterOpts) (*VotingProcessValidatorRemovedIterator, error) {

	logs, sub, err := _VotingProcess.contract.FilterLogs(opts, "ValidatorRemoved")
	if err != nil {
		return nil, err
	}
	return &VotingProcessValidatorRemovedIterator{contract: _VotingProcess.contract, event: "ValidatorRemoved", logs: logs, sub: sub}, nil
}

// WatchValidatorRemoved is a free log subscription operation binding the contract event 0x53344ca00b011ca20d3dc9f1bb71ed60e097b598b9f35482879138cc15f28ef9.
//
// Solidity: event ValidatorRemoved(string validatorPublicKey)
func (_VotingProcess *VotingProcessFilterer) WatchValidatorRemoved(opts *bind.WatchOpts, sink chan<- *VotingProcessValidatorRemoved) (event.Subscription, error) {

	logs, sub, err := _VotingProcess.contract.WatchLogs(opts, "ValidatorRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VotingProcessValidatorRemoved)
				if err := _VotingProcess.contract.UnpackLog(event, "ValidatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
