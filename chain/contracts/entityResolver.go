// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EntityResolverABI is the input ABI used to generate the binding from.
const EntityResolverABI = "[{\"inputs\":[{\"internalType\":\"contractENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"}],\"name\":\"ABIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"AuthorisationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ContenthashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ListItemChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ListItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentTypes\",\"type\":\"uint256\"}],\"name\":\"ABI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"contenthash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"interfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"listText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"pushListText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeListIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contentType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setABI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuthorised\",\"type\":\"bool\"}],\"name\":\"setAuthorisation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"setContenthash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setListText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// EntityResolverBin is the compiled bytecode used for deploying new EntityResolver.
var EntityResolverBin = "0x60806040523480156200001157600080fd5b5060405162003a8838038062003a88833981810160405281019062000037919062000096565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000124565b60008151905062000090816200010a565b92915050565b600060208284031215620000a957600080fd5b6000620000b9848285016200007f565b91505092915050565b6000620000cf82620000ea565b9050919050565b6000620000e382620000c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011581620000d6565b81146200012157600080fd5b50565b61395480620001346000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636f473720116100de578063bc1c58d111610097578063e59d895d11610071578063e59d895d1461048e578063f1cb7e06146104aa578063f86bc879146104da578063fdf720c61461050a57610173565b8063bc1c58d114610411578063c869023314610441578063d5fa2b001461047257610173565b80636f4737201461034157806374c756ee1461035d578063773722131461038d5780638b95dd71146103a9578063a2df33e1146103c5578063ac9650d8146103e157610173565b8063304e6ade11610130578063304e6ade1461025d5780633b3b57de146102795780633e9ce794146102a957806359d1d43c146102c5578063623195b0146102f5578063691f34311461031157610173565b806301ffc9a714610178578063043a728d146101a857806310f13a8c146101c4578063124a319c146101e05780632203ab561461021057806329cd62ea14610241575b600080fd5b610192600480360381019061018d9190612e5f565b61053a565b60405161019f9190613407565b60405180910390f35b6101c260048036038101906101bd9190612bc0565b61054c565b005b6101de60048036038101906101d99190612bc0565b610691565b005b6101fa60048036038101906101f59190612a85565b610775565b6040516102079190613372565b60405180910390f35b61022a60048036038101906102259190612d50565b610b60565b60405161023892919061359f565b60405180910390f35b61025b60048036038101906102569190612a36565b610caf565b005b61027760048036038101906102729190612b10565b610d77565b005b610293600480360381019061028e9190612933565b610e23565b6040516102a091906133a8565b60405180910390f35b6102c360048036038101906102be91906129e7565b610e5a565b005b6102df60048036038101906102da9190612b68565b610f6a565b6040516102ec919061351d565b60405180910390f35b61030f600480360381019061030a9190612d8c565b61103f565b005b61032b60048036038101906103269190612933565b611102565b604051610338919061351d565b60405180910390f35b61035b60048036038101906103569190612c49565b6111b7565b005b61037760048036038101906103729190612b68565b6113e7565b60405161038491906133e5565b60405180910390f35b6103a760048036038101906103a29190612b68565b611524565b005b6103c360048036038101906103be9190612df8565b6115d0565b005b6103df60048036038101906103da9190612cb5565b6116dc565b005b6103fb60048036038101906103f691906128ee565b61184a565b60405161040891906133c3565b60405180910390f35b61042b60048036038101906104269190612933565b6119ab565b60405161043891906134a5565b60405180910390f35b61045b60048036038101906104569190612933565b611a60565b60405161046992919061343d565b60405180910390f35b61048c6004803603810190610487919061295c565b611a9a565b005b6104a860048036038101906104a39190612ac1565b611afc565b005b6104c460048036038101906104bf9190612d50565b611c44565b6040516104d191906134a5565b60405180910390f35b6104f460048036038101906104ef9190612998565b611d0b565b6040516105019190613407565b60405180910390f35b610524600480360381019061051f9190612c49565b611d47565b604051610531919061351d565b60405180910390f35b600061054582611e53565b9050919050565b8461055681611eb0565b610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058c9061355f565b60405180910390fd5b600085856040516020016105aa929190613344565b6040516020818303038152906040528051906020012090506007600088815260200190815260200160002060008281526020019081526020016000208484909180600181540180825580915050600190039060005260206000200160009091929091929091929091925091906106219291906124a1565b50867fad6a325380d85c50dfaa38511cbbbc97c46b9a52e342c8d705bf5515d0ef45b387876001600760008d815260200190815260200160002060008781526020019081526020016000208054905003604051610680939291906134eb565b60405180910390a250505050505050565b8461069b81611eb0565b6106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d19061355f565b60405180910390fd5b82826006600089815260200190815260200160002087876040516106ff929190613344565b9081526020016040518091039020919061071a9291906124a1565b50848460405161072b929190613344565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516107659291906134c7565b60405180910390a3505050505050565b600080600360008581526020019081526020016000206000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461083a5780915050610b5a565b600061084585610e23565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561088757600092505050610b5a565b600060608273ffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b6040516024016108ba9190613466565b6040516020818303038152906040527f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610944919061332d565b600060405180830381855afa9150503d806000811461097f576040519150601f19603f3d011682016040523d82523d6000602084013e610984565b606091505b5091509150811580610997575060208151105b806109de5750600060f81b81601f815181106109af57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156109f0576000945050505050610b5a565b8273ffffffffffffffffffffffffffffffffffffffff1686604051602401610a189190613466565b6040516020818303038152906040527f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610aa2919061332d565b600060405180830381855afa9150503d8060008114610add576040519150601f19603f3d011682016040523d82523d6000602084013e610ae2565b606091505b508092508193505050811580610af9575060208151105b80610b405750600060f81b81601f81518110610b1157fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15610b52576000945050505050610b5a565b829450505050505b92915050565b60006060600080600086815260200190815260200160002090506000600190505b848111610c8c57600085821614158015610bc157506000826000838152602001908152602001600020805460018160011615610100020316600290049050115b15610c805780826000838152602001908152602001600020808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c6e5780601f10610c4357610100808354040283529160200191610c6e565b820191906000526020600020905b815481529060010190602001808311610c5157829003601f168201915b50505050509050935093505050610ca8565b600181901b9050610b81565b5060006040518060200160405280600081525081915092509250505b9250929050565b82610cb981611eb0565b610cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cef9061355f565b60405180910390fd5b604051806040016040528084815260200183815250600560008681526020019081526020016000206000820151816000015560208201518160010155905050837f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e468484604051610d6992919061343d565b60405180910390a250505050565b82610d8181611eb0565b610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db79061355f565b60405180910390fd5b8282600260008781526020019081526020016000209190610de2929190612521565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610e15929190613481565b60405180910390a250505050565b60006060610e3283603c611c44565b9050600081511415610e48576000915050610e55565b610e51816120c9565b9150505b919050565b806009600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16847fe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df84604051610f5d9190613407565b60405180910390a4505050565b6060600660008581526020019081526020016000208383604051610f8f929190613344565b90815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110315780601f1061100657610100808354040283529160200191611031565b820191906000526020600020905b81548152906001019060200180831161101457829003601f168201915b505050505090509392505050565b8361104981611eb0565b611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107f9061355f565b60405180910390fd5b60008460018603161461109a57600080fd5b8282600080888152602001908152602001600020600087815260200190815260200160002091906110cc929190612521565b5083857faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe360405160405180910390a35050505050565b6060600460008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b50505050509050919050565b836111c181611eb0565b611200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f79061355f565b60405180910390fd5b60008484604051602001611215929190613344565b604051602081830303815290604052805190602001209050826007600088815260200190815260200160002060008381526020019081526020016000208054905011611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d9061353f565b60405180910390fd5b600060076000888152602001908152602001600020600083815260200190815260200160002080549050905060076000888152602001908152602001600020600083815260200190815260200160002060018203815481106112f457fe5b90600052602060002001600760008981526020019081526020016000206000848152602001908152602001600020858154811061132d57fe5b9060005260206000200190805460018160011615610100020316600290046113569291906125a1565b5060076000888152602001908152602001600020600083815260200190815260200160002080548061138457fe5b6001900381819060005260206000200160006113a09190612628565b9055867f5dbbe7a1e616b629a61480b13fd4e89dfe8b604d35802cdf7b0bb03687e3eb498787876040516113d6939291906134eb565b60405180910390a250505050505050565b6060600083836040516020016113fe929190613344565b604051602081830303815290604052805190602001209050600760008681526020019081526020016000206000828152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611516578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115025780601f106114d757610100808354040283529160200191611502565b820191906000526020600020905b8154815290600101906020018083116114e557829003601f168201915b50505050508152602001906001019061145a565b505050509150509392505050565b8261152e81611eb0565b61156d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115649061355f565b60405180910390fd5b828260046000878152602001908152602001600020919061158f9291906124a1565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f784846040516115c29291906134c7565b60405180910390a250505050565b826115da81611eb0565b611619576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116109061355f565b60405180910390fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752848460405161164b92919061359f565b60405180910390a2603c83141561169d57837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2611687846120c9565b604051611694919061338d565b60405180910390a25b8160016000868152602001908152602001600020600085815260200190815260200160002090805190602001906116d5929190612670565b5050505050565b856116e681611eb0565b611725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171c9061355f565b60405180910390fd5b6000868660405160200161173a929190613344565b60405160208183030381529060405280519060200120905084600760008a8152602001908152602001600020600083815260200190815260200160002080549050116117bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b29061353f565b60405180910390fd5b8383600760008b8152602001908152602001600020600084815260200190815260200160002087815481106117ec57fe5b9060005260206000200191906118039291906124a1565b50877fad6a325380d85c50dfaa38511cbbbc97c46b9a52e342c8d705bf5515d0ef45b3888888604051611838939291906134eb565b60405180910390a25050505050505050565b60608282905067ffffffffffffffff8111801561186657600080fd5b5060405190808252806020026020018201604052801561189a57816020015b60608152602001906001900390816118855790505b50905060008090505b838390508110156119a157600060603073ffffffffffffffffffffffffffffffffffffffff168686858181106118d557fe5b90506020028101906118e791906135cf565b6040516118f5929190613314565b600060405180830381855af49150503d8060008114611930576040519150601f19603f3d011682016040523d82523d6000602084013e611935565b606091505b50915091508161197a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119719061357f565b60405180910390fd5b8084848151811061198757fe5b6020026020010181905250505080806001019150506118a3565b5080905092915050565b6060600260008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a545780601f10611a2957610100808354040283529160200191611a54565b820191906000526020600020905b815481529060010190602001808311611a3757829003601f168201915b50505050509050919050565b6000806005600084815260200190815260200160002060000154600560008581526020019081526020016000206001015491509150915091565b81611aa481611eb0565b611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada9061355f565b60405180910390fd5b611af783603c611af2856120ec565b6115d0565b505050565b82611b0681611eb0565b611b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3c9061355f565b60405180910390fd5b81600360008681526020019081526020016000206000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa84604051611c369190613372565b60405180910390a350505050565b60606001600084815260200190815260200160002060008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cfe5780601f10611cd357610100808354040283529160200191611cfe565b820191906000526020600020905b815481529060010190602001808311611ce157829003601f168201915b5050505050905092915050565b6009602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b606060008484604051602001611d5e929190613344565b6040516020818303038152906040528051906020012090506007600087815260200190815260200160002060008281526020019081526020016000208381548110611da557fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e435780601f10611e1857610100808354040283529160200191611e43565b820191906000526020600020905b815481529060010190602001808311611e2657829003601f168201915b5050505050915050949350505050565b60008060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ea95750611ea88261214e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612098576000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401611f649190613422565b60206040518083038186803b158015611f7c57600080fd5b505afa158015611f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb491906128c5565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061208757506009600084815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156120965760019150506120c4565b505b81336040516020016120aa91906132f9565b604051602081830303815290604052805190602001201490505b919050565b600060148251146120d957600080fd5b600c6101000a6020830151049050919050565b6060601467ffffffffffffffff8111801561210657600080fd5b506040519080825280601f01601f1916602001820160405280156121395781602001600182028036833780820191505090505b509050600c6101000a82026020820152919050565b60006359d1d43c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806121a857506121a7826121af565b5b9050919050565b600063c869023360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612209575061220882612210565b5b9050919050565b600063691f343160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061226a575061226982612271565b5b9050919050565b600060405161227f9061335d565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806122d757506122d6826122de565b5b9050919050565b600063bc1c58d160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061233857506123378261233f565b5b9050919050565b6000633b3b57de60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806123d8575063f1cb7e0660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806123e857506123e7826123ef565b5b9050919050565b6000632203ab5660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612449575061244882612450565b5b9050919050565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124e257803560ff1916838001178555612510565b82800160010185558215612510579182015b8281111561250f5782358255916020019190600101906124f4565b5b50905061251d91906126f0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061256257803560ff1916838001178555612590565b82800160010185558215612590579182015b8281111561258f578235825591602001919060010190612574565b5b50905061259d91906126f0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125da5780548555612617565b8280016001018555821561261757600052602060002091601f016020900482015b828111156126165782548255916001019190600101906125fb565b5b50905061262491906126f0565b5090565b50805460018160011615610100020316600290046000825580601f1061264e575061266d565b601f01602090049060005260206000209081019061266c91906126f0565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126b157805160ff19168380011785556126df565b828001600101855582156126df579182015b828111156126de5782518255916020019190600101906126c3565b5b5090506126ec91906126f0565b5090565b61271291905b8082111561270e5760008160009055506001016126f6565b5090565b90565b600081359050612724816138ab565b92915050565b600081519050612739816138ab565b92915050565b60008083601f84011261275157600080fd5b8235905067ffffffffffffffff81111561276a57600080fd5b60208301915083602082028301111561278257600080fd5b9250929050565b600081359050612798816138c2565b92915050565b6000813590506127ad816138d9565b92915050565b6000813590506127c2816138f0565b92915050565b60008083601f8401126127da57600080fd5b8235905067ffffffffffffffff8111156127f357600080fd5b60208301915083600182028301111561280b57600080fd5b9250929050565b600082601f83011261282357600080fd5b813561283661283182613653565b613626565b9150808252602083016020830185838301111561285257600080fd5b61285d838284613827565b50505092915050565b60008083601f84011261287857600080fd5b8235905067ffffffffffffffff81111561289157600080fd5b6020830191508360018202830111156128a957600080fd5b9250929050565b6000813590506128bf81613907565b92915050565b6000602082840312156128d757600080fd5b60006128e58482850161272a565b91505092915050565b6000806020838503121561290157600080fd5b600083013567ffffffffffffffff81111561291b57600080fd5b6129278582860161273f565b92509250509250929050565b60006020828403121561294557600080fd5b60006129538482850161279e565b91505092915050565b6000806040838503121561296f57600080fd5b600061297d8582860161279e565b925050602061298e85828601612715565b9150509250929050565b6000806000606084860312156129ad57600080fd5b60006129bb8682870161279e565b93505060206129cc86828701612715565b92505060406129dd86828701612715565b9150509250925092565b6000806000606084860312156129fc57600080fd5b6000612a0a8682870161279e565b9350506020612a1b86828701612715565b9250506040612a2c86828701612789565b9150509250925092565b600080600060608486031215612a4b57600080fd5b6000612a598682870161279e565b9350506020612a6a8682870161279e565b9250506040612a7b8682870161279e565b9150509250925092565b60008060408385031215612a9857600080fd5b6000612aa68582860161279e565b9250506020612ab7858286016127b3565b9150509250929050565b600080600060608486031215612ad657600080fd5b6000612ae48682870161279e565b9350506020612af5868287016127b3565b9250506040612b0686828701612715565b9150509250925092565b600080600060408486031215612b2557600080fd5b6000612b338682870161279e565b935050602084013567ffffffffffffffff811115612b5057600080fd5b612b5c868287016127c8565b92509250509250925092565b600080600060408486031215612b7d57600080fd5b6000612b8b8682870161279e565b935050602084013567ffffffffffffffff811115612ba857600080fd5b612bb486828701612866565b92509250509250925092565b600080600080600060608688031215612bd857600080fd5b6000612be68882890161279e565b955050602086013567ffffffffffffffff811115612c0357600080fd5b612c0f88828901612866565b9450945050604086013567ffffffffffffffff811115612c2e57600080fd5b612c3a88828901612866565b92509250509295509295909350565b60008060008060608587031215612c5f57600080fd5b6000612c6d8782880161279e565b945050602085013567ffffffffffffffff811115612c8a57600080fd5b612c9687828801612866565b93509350506040612ca9878288016128b0565b91505092959194509250565b60008060008060008060808789031215612cce57600080fd5b6000612cdc89828a0161279e565b965050602087013567ffffffffffffffff811115612cf957600080fd5b612d0589828a01612866565b95509550506040612d1889828a016128b0565b935050606087013567ffffffffffffffff811115612d3557600080fd5b612d4189828a01612866565b92509250509295509295509295565b60008060408385031215612d6357600080fd5b6000612d718582860161279e565b9250506020612d82858286016128b0565b9150509250929050565b60008060008060608587031215612da257600080fd5b6000612db08782880161279e565b9450506020612dc1878288016128b0565b935050604085013567ffffffffffffffff811115612dde57600080fd5b612dea878288016127c8565b925092505092959194509250565b600080600060608486031215612e0d57600080fd5b6000612e1b8682870161279e565b9350506020612e2c868287016128b0565b925050604084013567ffffffffffffffff811115612e4957600080fd5b612e5586828701612812565b9150509250925092565b600060208284031215612e7157600080fd5b6000612e7f848285016127b3565b91505092915050565b6000612e94838361305d565b905092915050565b6000612ea88383613152565b905092915050565b612eb9816137f1565b82525050565b612ec881613773565b82525050565b612edf612eda82613773565b613869565b82525050565b612eee81613761565b82525050565b6000612eff8261369f565b612f0981856136e5565b935083602082028501612f1b8561367f565b8060005b85811015612f575784840389528151612f388582612e88565b9450612f43836136cb565b925060208a01995050600181019050612f1f565b50829750879550505050505092915050565b6000612f74826136aa565b612f7e81856136f6565b935083602082028501612f908561368f565b8060005b85811015612fcc5784840389528151612fad8582612e9c565b9450612fb8836136d8565b925060208a01995050600181019050612f94565b50829750879550505050505092915050565b612fe781613785565b82525050565b612ff681613791565b82525050565b6130058161379b565b82525050565b60006130178385613718565b9350613024838584613827565b61302d8361388d565b840190509392505050565b60006130448385613729565b9350613051838584613827565b82840190509392505050565b6000613068826136b5565b6130728185613707565b9350613082818560208601613836565b61308b8161388d565b840191505092915050565b60006130a1826136b5565b6130ab8185613718565b93506130bb818560208601613836565b6130c48161388d565b840191505092915050565b60006130da826136b5565b6130e48185613729565b93506130f4818560208601613836565b80840191505092915050565b600061310c8385613745565b9350613119838584613827565b6131228361388d565b840190509392505050565b60006131398385613756565b9350613146838584613827565b82840190509392505050565b600061315d826136c0565b6131678185613734565b9350613177818560208601613836565b6131808161388d565b840191505092915050565b6000613196826136c0565b6131a08185613745565b93506131b0818560208601613836565b6131b98161388d565b840191505092915050565b60006131d1602483613756565b91507f696e74657266616365496d706c656d656e74657228627974657333322c62797460008301527f65733429000000000000000000000000000000000000000000000000000000006020830152602482019050919050565b6000613237600d83613745565b91507f496e76616c696420696e646578000000000000000000000000000000000000006000830152602082019050919050565b6000613277600c83613745565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b60006132b7601383613745565b91507f6661696c65642064656c656761746563616c6c000000000000000000000000006000830152602082019050919050565b6132f3816137e7565b82525050565b60006133058284612ece565b60148201915081905092915050565b6000613321828486613038565b91508190509392505050565b600061333982846130cf565b915081905092915050565b600061335182848661312d565b91508190509392505050565b6000613368826131c4565b9150819050919050565b60006020820190506133876000830184612ee5565b92915050565b60006020820190506133a26000830184612eb0565b92915050565b60006020820190506133bd6000830184612ebf565b92915050565b600060208201905081810360008301526133dd8184612ef4565b905092915050565b600060208201905081810360008301526133ff8184612f69565b905092915050565b600060208201905061341c6000830184612fde565b92915050565b60006020820190506134376000830184612fed565b92915050565b60006040820190506134526000830185612fed565b61345f6020830184612fed565b9392505050565b600060208201905061347b6000830184612ffc565b92915050565b6000602082019050818103600083015261349c81848661300b565b90509392505050565b600060208201905081810360008301526134bf8184613096565b905092915050565b600060208201905081810360008301526134e2818486613100565b90509392505050565b60006040820190508181036000830152613506818587613100565b905061351560208301846132ea565b949350505050565b60006020820190508181036000830152613537818461318b565b905092915050565b600060208201905081810360008301526135588161322a565b9050919050565b600060208201905081810360008301526135788161326a565b9050919050565b60006020820190508181036000830152613598816132aa565b9050919050565b60006040820190506135b460008301856132ea565b81810360208301526135c68184613096565b90509392505050565b600080833560016020038436030381126135e857600080fd5b80840192508235915067ffffffffffffffff82111561360657600080fd5b60208301925060018202360383131561361e57600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff8211171561364957600080fd5b8060405250919050565b600067ffffffffffffffff82111561366a57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061376c826137c7565b9050919050565b600061377e826137c7565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006137fc82613803565b9050919050565b600061380e82613815565b9050919050565b6000613820826137c7565b9050919050565b82818337600083830152505050565b60005b83811015613854578082015181840152602081019050613839565b83811115613863576000848401525b50505050565b60006138748261387b565b9050919050565b60006138868261389e565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b6138b481613761565b81146138bf57600080fd5b50565b6138cb81613785565b81146138d657600080fd5b50565b6138e281613791565b81146138ed57600080fd5b50565b6138f98161379b565b811461390457600080fd5b50565b613910816137e7565b811461391b57600080fd5b5056fea2646970667358221220e8553850a8348179a450896c2cdef6c85dd2cc7fd8fa7c4bd255b72f2ff1d81764736f6c63430006060033"

// DeployEntityResolver deploys a new Ethereum contract, binding an instance of EntityResolver to it.
func DeployEntityResolver(auth *bind.TransactOpts, backend bind.ContractBackend, _ens common.Address) (common.Address, *types.Transaction, *EntityResolver, error) {
	parsed, err := abi.JSON(strings.NewReader(EntityResolverABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EntityResolverBin), backend, _ens)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EntityResolver{EntityResolverCaller: EntityResolverCaller{contract: contract}, EntityResolverTransactor: EntityResolverTransactor{contract: contract}, EntityResolverFilterer: EntityResolverFilterer{contract: contract}}, nil
}

// EntityResolver is an auto generated Go binding around an Ethereum contract.
type EntityResolver struct {
	EntityResolverCaller     // Read-only binding to the contract
	EntityResolverTransactor // Write-only binding to the contract
	EntityResolverFilterer   // Log filterer for contract events
}

// EntityResolverCaller is an auto generated read-only Go binding around an Ethereum contract.
type EntityResolverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EntityResolverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EntityResolverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EntityResolverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EntityResolverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EntityResolverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EntityResolverSession struct {
	Contract     *EntityResolver   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EntityResolverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EntityResolverCallerSession struct {
	Contract *EntityResolverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// EntityResolverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EntityResolverTransactorSession struct {
	Contract     *EntityResolverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EntityResolverRaw is an auto generated low-level Go binding around an Ethereum contract.
type EntityResolverRaw struct {
	Contract *EntityResolver // Generic contract binding to access the raw methods on
}

// EntityResolverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EntityResolverCallerRaw struct {
	Contract *EntityResolverCaller // Generic read-only contract binding to access the raw methods on
}

// EntityResolverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EntityResolverTransactorRaw struct {
	Contract *EntityResolverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEntityResolver creates a new instance of EntityResolver, bound to a specific deployed contract.
func NewEntityResolver(address common.Address, backend bind.ContractBackend) (*EntityResolver, error) {
	contract, err := bindEntityResolver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EntityResolver{EntityResolverCaller: EntityResolverCaller{contract: contract}, EntityResolverTransactor: EntityResolverTransactor{contract: contract}, EntityResolverFilterer: EntityResolverFilterer{contract: contract}}, nil
}

// NewEntityResolverCaller creates a new read-only instance of EntityResolver, bound to a specific deployed contract.
func NewEntityResolverCaller(address common.Address, caller bind.ContractCaller) (*EntityResolverCaller, error) {
	contract, err := bindEntityResolver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EntityResolverCaller{contract: contract}, nil
}

// NewEntityResolverTransactor creates a new write-only instance of EntityResolver, bound to a specific deployed contract.
func NewEntityResolverTransactor(address common.Address, transactor bind.ContractTransactor) (*EntityResolverTransactor, error) {
	contract, err := bindEntityResolver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EntityResolverTransactor{contract: contract}, nil
}

// NewEntityResolverFilterer creates a new log filterer instance of EntityResolver, bound to a specific deployed contract.
func NewEntityResolverFilterer(address common.Address, filterer bind.ContractFilterer) (*EntityResolverFilterer, error) {
	contract, err := bindEntityResolver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EntityResolverFilterer{contract: contract}, nil
}

// bindEntityResolver binds a generic wrapper to an already deployed contract.
func bindEntityResolver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EntityResolverABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EntityResolver *EntityResolverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EntityResolver.Contract.EntityResolverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EntityResolver *EntityResolverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EntityResolver.Contract.EntityResolverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EntityResolver *EntityResolverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EntityResolver.Contract.EntityResolverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EntityResolver *EntityResolverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EntityResolver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EntityResolver *EntityResolverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EntityResolver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EntityResolver *EntityResolverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EntityResolver.Contract.contract.Transact(opts, method, params...)
}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) view returns(uint256, bytes)
func (_EntityResolver *EntityResolverCaller) ABI(opts *bind.CallOpts, node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "ABI", node, contentTypes)

	if err != nil {
		return *new(*big.Int), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) view returns(uint256, bytes)
func (_EntityResolver *EntityResolverSession) ABI(node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	return _EntityResolver.Contract.ABI(&_EntityResolver.CallOpts, node, contentTypes)
}

// ABI is a free data retrieval call binding the contract method 0x2203ab56.
//
// Solidity: function ABI(bytes32 node, uint256 contentTypes) view returns(uint256, bytes)
func (_EntityResolver *EntityResolverCallerSession) ABI(node [32]byte, contentTypes *big.Int) (*big.Int, []byte, error) {
	return _EntityResolver.Contract.ABI(&_EntityResolver.CallOpts, node, contentTypes)
}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) view returns(address)
func (_EntityResolver *EntityResolverCaller) Addr(opts *bind.CallOpts, node [32]byte) (common.Address, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "addr", node)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) view returns(address)
func (_EntityResolver *EntityResolverSession) Addr(node [32]byte) (common.Address, error) {
	return _EntityResolver.Contract.Addr(&_EntityResolver.CallOpts, node)
}

// Addr is a free data retrieval call binding the contract method 0x3b3b57de.
//
// Solidity: function addr(bytes32 node) view returns(address)
func (_EntityResolver *EntityResolverCallerSession) Addr(node [32]byte) (common.Address, error) {
	return _EntityResolver.Contract.Addr(&_EntityResolver.CallOpts, node)
}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) view returns(bytes)
func (_EntityResolver *EntityResolverCaller) Addr0(opts *bind.CallOpts, node [32]byte, coinType *big.Int) ([]byte, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "addr0", node, coinType)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) view returns(bytes)
func (_EntityResolver *EntityResolverSession) Addr0(node [32]byte, coinType *big.Int) ([]byte, error) {
	return _EntityResolver.Contract.Addr0(&_EntityResolver.CallOpts, node, coinType)
}

// Addr0 is a free data retrieval call binding the contract method 0xf1cb7e06.
//
// Solidity: function addr(bytes32 node, uint256 coinType) view returns(bytes)
func (_EntityResolver *EntityResolverCallerSession) Addr0(node [32]byte, coinType *big.Int) ([]byte, error) {
	return _EntityResolver.Contract.Addr0(&_EntityResolver.CallOpts, node, coinType)
}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) view returns(bool)
func (_EntityResolver *EntityResolverCaller) Authorisations(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "authorisations", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) view returns(bool)
func (_EntityResolver *EntityResolverSession) Authorisations(arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	return _EntityResolver.Contract.Authorisations(&_EntityResolver.CallOpts, arg0, arg1, arg2)
}

// Authorisations is a free data retrieval call binding the contract method 0xf86bc879.
//
// Solidity: function authorisations(bytes32 , address , address ) view returns(bool)
func (_EntityResolver *EntityResolverCallerSession) Authorisations(arg0 [32]byte, arg1 common.Address, arg2 common.Address) (bool, error) {
	return _EntityResolver.Contract.Authorisations(&_EntityResolver.CallOpts, arg0, arg1, arg2)
}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) view returns(bytes)
func (_EntityResolver *EntityResolverCaller) Contenthash(opts *bind.CallOpts, node [32]byte) ([]byte, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "contenthash", node)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) view returns(bytes)
func (_EntityResolver *EntityResolverSession) Contenthash(node [32]byte) ([]byte, error) {
	return _EntityResolver.Contract.Contenthash(&_EntityResolver.CallOpts, node)
}

// Contenthash is a free data retrieval call binding the contract method 0xbc1c58d1.
//
// Solidity: function contenthash(bytes32 node) view returns(bytes)
func (_EntityResolver *EntityResolverCallerSession) Contenthash(node [32]byte) ([]byte, error) {
	return _EntityResolver.Contract.Contenthash(&_EntityResolver.CallOpts, node)
}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) view returns(address)
func (_EntityResolver *EntityResolverCaller) InterfaceImplementer(opts *bind.CallOpts, node [32]byte, interfaceID [4]byte) (common.Address, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "interfaceImplementer", node, interfaceID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) view returns(address)
func (_EntityResolver *EntityResolverSession) InterfaceImplementer(node [32]byte, interfaceID [4]byte) (common.Address, error) {
	return _EntityResolver.Contract.InterfaceImplementer(&_EntityResolver.CallOpts, node, interfaceID)
}

// InterfaceImplementer is a free data retrieval call binding the contract method 0x124a319c.
//
// Solidity: function interfaceImplementer(bytes32 node, bytes4 interfaceID) view returns(address)
func (_EntityResolver *EntityResolverCallerSession) InterfaceImplementer(node [32]byte, interfaceID [4]byte) (common.Address, error) {
	return _EntityResolver.Contract.InterfaceImplementer(&_EntityResolver.CallOpts, node, interfaceID)
}

// List is a free data retrieval call binding the contract method 0x74c756ee.
//
// Solidity: function list(bytes32 node, string key) view returns(string[])
func (_EntityResolver *EntityResolverCaller) List(opts *bind.CallOpts, node [32]byte, key string) ([]string, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "list", node, key)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// List is a free data retrieval call binding the contract method 0x74c756ee.
//
// Solidity: function list(bytes32 node, string key) view returns(string[])
func (_EntityResolver *EntityResolverSession) List(node [32]byte, key string) ([]string, error) {
	return _EntityResolver.Contract.List(&_EntityResolver.CallOpts, node, key)
}

// List is a free data retrieval call binding the contract method 0x74c756ee.
//
// Solidity: function list(bytes32 node, string key) view returns(string[])
func (_EntityResolver *EntityResolverCallerSession) List(node [32]byte, key string) ([]string, error) {
	return _EntityResolver.Contract.List(&_EntityResolver.CallOpts, node, key)
}

// ListText is a free data retrieval call binding the contract method 0xfdf720c6.
//
// Solidity: function listText(bytes32 node, string key, uint256 index) view returns(string)
func (_EntityResolver *EntityResolverCaller) ListText(opts *bind.CallOpts, node [32]byte, key string, index *big.Int) (string, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "listText", node, key, index)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ListText is a free data retrieval call binding the contract method 0xfdf720c6.
//
// Solidity: function listText(bytes32 node, string key, uint256 index) view returns(string)
func (_EntityResolver *EntityResolverSession) ListText(node [32]byte, key string, index *big.Int) (string, error) {
	return _EntityResolver.Contract.ListText(&_EntityResolver.CallOpts, node, key, index)
}

// ListText is a free data retrieval call binding the contract method 0xfdf720c6.
//
// Solidity: function listText(bytes32 node, string key, uint256 index) view returns(string)
func (_EntityResolver *EntityResolverCallerSession) ListText(node [32]byte, key string, index *big.Int) (string, error) {
	return _EntityResolver.Contract.ListText(&_EntityResolver.CallOpts, node, key, index)
}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) view returns(string)
func (_EntityResolver *EntityResolverCaller) Name(opts *bind.CallOpts, node [32]byte) (string, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "name", node)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) view returns(string)
func (_EntityResolver *EntityResolverSession) Name(node [32]byte) (string, error) {
	return _EntityResolver.Contract.Name(&_EntityResolver.CallOpts, node)
}

// Name is a free data retrieval call binding the contract method 0x691f3431.
//
// Solidity: function name(bytes32 node) view returns(string)
func (_EntityResolver *EntityResolverCallerSession) Name(node [32]byte) (string, error) {
	return _EntityResolver.Contract.Name(&_EntityResolver.CallOpts, node)
}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) view returns(bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverCaller) Pubkey(opts *bind.CallOpts, node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "pubkey", node)

	outstruct := new(struct {
		X [32]byte
		Y [32]byte
	})

	outstruct.X = out[0].([32]byte)
	outstruct.Y = out[1].([32]byte)

	return *outstruct, err

}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) view returns(bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverSession) Pubkey(node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	return _EntityResolver.Contract.Pubkey(&_EntityResolver.CallOpts, node)
}

// Pubkey is a free data retrieval call binding the contract method 0xc8690233.
//
// Solidity: function pubkey(bytes32 node) view returns(bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverCallerSession) Pubkey(node [32]byte) (struct {
	X [32]byte
	Y [32]byte
}, error) {
	return _EntityResolver.Contract.Pubkey(&_EntityResolver.CallOpts, node)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_EntityResolver *EntityResolverCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "supportsInterface", interfaceID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_EntityResolver *EntityResolverSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _EntityResolver.Contract.SupportsInterface(&_EntityResolver.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) pure returns(bool)
func (_EntityResolver *EntityResolverCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _EntityResolver.Contract.SupportsInterface(&_EntityResolver.CallOpts, interfaceID)
}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) view returns(string)
func (_EntityResolver *EntityResolverCaller) Text(opts *bind.CallOpts, node [32]byte, key string) (string, error) {
	var out []interface{}
	err := _EntityResolver.contract.Call(opts, &out, "text", node, key)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) view returns(string)
func (_EntityResolver *EntityResolverSession) Text(node [32]byte, key string) (string, error) {
	return _EntityResolver.Contract.Text(&_EntityResolver.CallOpts, node, key)
}

// Text is a free data retrieval call binding the contract method 0x59d1d43c.
//
// Solidity: function text(bytes32 node, string key) view returns(string)
func (_EntityResolver *EntityResolverCallerSession) Text(node [32]byte, key string) (string, error) {
	return _EntityResolver.Contract.Text(&_EntityResolver.CallOpts, node, key)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_EntityResolver *EntityResolverTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_EntityResolver *EntityResolverSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.Multicall(&_EntityResolver.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_EntityResolver *EntityResolverTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.Multicall(&_EntityResolver.TransactOpts, data)
}

// PushListText is a paid mutator transaction binding the contract method 0x043a728d.
//
// Solidity: function pushListText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverTransactor) PushListText(opts *bind.TransactOpts, node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "pushListText", node, key, value)
}

// PushListText is a paid mutator transaction binding the contract method 0x043a728d.
//
// Solidity: function pushListText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverSession) PushListText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.PushListText(&_EntityResolver.TransactOpts, node, key, value)
}

// PushListText is a paid mutator transaction binding the contract method 0x043a728d.
//
// Solidity: function pushListText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverTransactorSession) PushListText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.PushListText(&_EntityResolver.TransactOpts, node, key, value)
}

// RemoveListIndex is a paid mutator transaction binding the contract method 0x6f473720.
//
// Solidity: function removeListIndex(bytes32 node, string key, uint256 index) returns()
func (_EntityResolver *EntityResolverTransactor) RemoveListIndex(opts *bind.TransactOpts, node [32]byte, key string, index *big.Int) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "removeListIndex", node, key, index)
}

// RemoveListIndex is a paid mutator transaction binding the contract method 0x6f473720.
//
// Solidity: function removeListIndex(bytes32 node, string key, uint256 index) returns()
func (_EntityResolver *EntityResolverSession) RemoveListIndex(node [32]byte, key string, index *big.Int) (*types.Transaction, error) {
	return _EntityResolver.Contract.RemoveListIndex(&_EntityResolver.TransactOpts, node, key, index)
}

// RemoveListIndex is a paid mutator transaction binding the contract method 0x6f473720.
//
// Solidity: function removeListIndex(bytes32 node, string key, uint256 index) returns()
func (_EntityResolver *EntityResolverTransactorSession) RemoveListIndex(node [32]byte, key string, index *big.Int) (*types.Transaction, error) {
	return _EntityResolver.Contract.RemoveListIndex(&_EntityResolver.TransactOpts, node, key, index)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_EntityResolver *EntityResolverTransactor) SetABI(opts *bind.TransactOpts, node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setABI", node, contentType, data)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_EntityResolver *EntityResolverSession) SetABI(node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetABI(&_EntityResolver.TransactOpts, node, contentType, data)
}

// SetABI is a paid mutator transaction binding the contract method 0x623195b0.
//
// Solidity: function setABI(bytes32 node, uint256 contentType, bytes data) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetABI(node [32]byte, contentType *big.Int, data []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetABI(&_EntityResolver.TransactOpts, node, contentType, data)
}

// SetAddr is a paid mutator transaction binding the contract method 0x8b95dd71.
//
// Solidity: function setAddr(bytes32 node, uint256 coinType, bytes a) returns()
func (_EntityResolver *EntityResolverTransactor) SetAddr(opts *bind.TransactOpts, node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setAddr", node, coinType, a)
}

// SetAddr is a paid mutator transaction binding the contract method 0x8b95dd71.
//
// Solidity: function setAddr(bytes32 node, uint256 coinType, bytes a) returns()
func (_EntityResolver *EntityResolverSession) SetAddr(node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAddr(&_EntityResolver.TransactOpts, node, coinType, a)
}

// SetAddr is a paid mutator transaction binding the contract method 0x8b95dd71.
//
// Solidity: function setAddr(bytes32 node, uint256 coinType, bytes a) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetAddr(node [32]byte, coinType *big.Int, a []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAddr(&_EntityResolver.TransactOpts, node, coinType, a)
}

// SetAddr0 is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_EntityResolver *EntityResolverTransactor) SetAddr0(opts *bind.TransactOpts, node [32]byte, a common.Address) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setAddr0", node, a)
}

// SetAddr0 is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_EntityResolver *EntityResolverSession) SetAddr0(node [32]byte, a common.Address) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAddr0(&_EntityResolver.TransactOpts, node, a)
}

// SetAddr0 is a paid mutator transaction binding the contract method 0xd5fa2b00.
//
// Solidity: function setAddr(bytes32 node, address a) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetAddr0(node [32]byte, a common.Address) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAddr0(&_EntityResolver.TransactOpts, node, a)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_EntityResolver *EntityResolverTransactor) SetAuthorisation(opts *bind.TransactOpts, node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setAuthorisation", node, target, isAuthorised)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_EntityResolver *EntityResolverSession) SetAuthorisation(node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAuthorisation(&_EntityResolver.TransactOpts, node, target, isAuthorised)
}

// SetAuthorisation is a paid mutator transaction binding the contract method 0x3e9ce794.
//
// Solidity: function setAuthorisation(bytes32 node, address target, bool isAuthorised) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetAuthorisation(node [32]byte, target common.Address, isAuthorised bool) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetAuthorisation(&_EntityResolver.TransactOpts, node, target, isAuthorised)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_EntityResolver *EntityResolverTransactor) SetContenthash(opts *bind.TransactOpts, node [32]byte, hash []byte) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setContenthash", node, hash)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_EntityResolver *EntityResolverSession) SetContenthash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetContenthash(&_EntityResolver.TransactOpts, node, hash)
}

// SetContenthash is a paid mutator transaction binding the contract method 0x304e6ade.
//
// Solidity: function setContenthash(bytes32 node, bytes hash) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetContenthash(node [32]byte, hash []byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetContenthash(&_EntityResolver.TransactOpts, node, hash)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_EntityResolver *EntityResolverTransactor) SetInterface(opts *bind.TransactOpts, node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setInterface", node, interfaceID, implementer)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_EntityResolver *EntityResolverSession) SetInterface(node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetInterface(&_EntityResolver.TransactOpts, node, interfaceID, implementer)
}

// SetInterface is a paid mutator transaction binding the contract method 0xe59d895d.
//
// Solidity: function setInterface(bytes32 node, bytes4 interfaceID, address implementer) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetInterface(node [32]byte, interfaceID [4]byte, implementer common.Address) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetInterface(&_EntityResolver.TransactOpts, node, interfaceID, implementer)
}

// SetListText is a paid mutator transaction binding the contract method 0xa2df33e1.
//
// Solidity: function setListText(bytes32 node, string key, uint256 index, string value) returns()
func (_EntityResolver *EntityResolverTransactor) SetListText(opts *bind.TransactOpts, node [32]byte, key string, index *big.Int, value string) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setListText", node, key, index, value)
}

// SetListText is a paid mutator transaction binding the contract method 0xa2df33e1.
//
// Solidity: function setListText(bytes32 node, string key, uint256 index, string value) returns()
func (_EntityResolver *EntityResolverSession) SetListText(node [32]byte, key string, index *big.Int, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetListText(&_EntityResolver.TransactOpts, node, key, index, value)
}

// SetListText is a paid mutator transaction binding the contract method 0xa2df33e1.
//
// Solidity: function setListText(bytes32 node, string key, uint256 index, string value) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetListText(node [32]byte, key string, index *big.Int, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetListText(&_EntityResolver.TransactOpts, node, key, index, value)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_EntityResolver *EntityResolverTransactor) SetName(opts *bind.TransactOpts, node [32]byte, name string) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setName", node, name)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_EntityResolver *EntityResolverSession) SetName(node [32]byte, name string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetName(&_EntityResolver.TransactOpts, node, name)
}

// SetName is a paid mutator transaction binding the contract method 0x77372213.
//
// Solidity: function setName(bytes32 node, string name) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetName(node [32]byte, name string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetName(&_EntityResolver.TransactOpts, node, name)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_EntityResolver *EntityResolverTransactor) SetPubkey(opts *bind.TransactOpts, node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setPubkey", node, x, y)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_EntityResolver *EntityResolverSession) SetPubkey(node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetPubkey(&_EntityResolver.TransactOpts, node, x, y)
}

// SetPubkey is a paid mutator transaction binding the contract method 0x29cd62ea.
//
// Solidity: function setPubkey(bytes32 node, bytes32 x, bytes32 y) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetPubkey(node [32]byte, x [32]byte, y [32]byte) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetPubkey(&_EntityResolver.TransactOpts, node, x, y)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverTransactor) SetText(opts *bind.TransactOpts, node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.contract.Transact(opts, "setText", node, key, value)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverSession) SetText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetText(&_EntityResolver.TransactOpts, node, key, value)
}

// SetText is a paid mutator transaction binding the contract method 0x10f13a8c.
//
// Solidity: function setText(bytes32 node, string key, string value) returns()
func (_EntityResolver *EntityResolverTransactorSession) SetText(node [32]byte, key string, value string) (*types.Transaction, error) {
	return _EntityResolver.Contract.SetText(&_EntityResolver.TransactOpts, node, key, value)
}

// EntityResolverABIChangedIterator is returned from FilterABIChanged and is used to iterate over the raw logs and unpacked data for ABIChanged events raised by the EntityResolver contract.
type EntityResolverABIChangedIterator struct {
	Event *EntityResolverABIChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverABIChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverABIChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverABIChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverABIChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverABIChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverABIChanged represents a ABIChanged event raised by the EntityResolver contract.
type EntityResolverABIChanged struct {
	Node        [32]byte
	ContentType *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterABIChanged is a free log retrieval operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_EntityResolver *EntityResolverFilterer) FilterABIChanged(opts *bind.FilterOpts, node [][32]byte, contentType []*big.Int) (*EntityResolverABIChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var contentTypeRule []interface{}
	for _, contentTypeItem := range contentType {
		contentTypeRule = append(contentTypeRule, contentTypeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "ABIChanged", nodeRule, contentTypeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverABIChangedIterator{contract: _EntityResolver.contract, event: "ABIChanged", logs: logs, sub: sub}, nil
}

// WatchABIChanged is a free log subscription operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_EntityResolver *EntityResolverFilterer) WatchABIChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverABIChanged, node [][32]byte, contentType []*big.Int) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var contentTypeRule []interface{}
	for _, contentTypeItem := range contentType {
		contentTypeRule = append(contentTypeRule, contentTypeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "ABIChanged", nodeRule, contentTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverABIChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "ABIChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseABIChanged is a log parse operation binding the contract event 0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3.
//
// Solidity: event ABIChanged(bytes32 indexed node, uint256 indexed contentType)
func (_EntityResolver *EntityResolverFilterer) ParseABIChanged(log types.Log) (*EntityResolverABIChanged, error) {
	event := new(EntityResolverABIChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "ABIChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverAddrChangedIterator is returned from FilterAddrChanged and is used to iterate over the raw logs and unpacked data for AddrChanged events raised by the EntityResolver contract.
type EntityResolverAddrChangedIterator struct {
	Event *EntityResolverAddrChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverAddrChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverAddrChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverAddrChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverAddrChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverAddrChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverAddrChanged represents a AddrChanged event raised by the EntityResolver contract.
type EntityResolverAddrChanged struct {
	Node [32]byte
	A    common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddrChanged is a free log retrieval operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_EntityResolver *EntityResolverFilterer) FilterAddrChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverAddrChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "AddrChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverAddrChangedIterator{contract: _EntityResolver.contract, event: "AddrChanged", logs: logs, sub: sub}, nil
}

// WatchAddrChanged is a free log subscription operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_EntityResolver *EntityResolverFilterer) WatchAddrChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverAddrChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "AddrChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverAddrChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "AddrChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddrChanged is a log parse operation binding the contract event 0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2.
//
// Solidity: event AddrChanged(bytes32 indexed node, address a)
func (_EntityResolver *EntityResolverFilterer) ParseAddrChanged(log types.Log) (*EntityResolverAddrChanged, error) {
	event := new(EntityResolverAddrChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "AddrChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverAddressChangedIterator is returned from FilterAddressChanged and is used to iterate over the raw logs and unpacked data for AddressChanged events raised by the EntityResolver contract.
type EntityResolverAddressChangedIterator struct {
	Event *EntityResolverAddressChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverAddressChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverAddressChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverAddressChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverAddressChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverAddressChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverAddressChanged represents a AddressChanged event raised by the EntityResolver contract.
type EntityResolverAddressChanged struct {
	Node       [32]byte
	CoinType   *big.Int
	NewAddress []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddressChanged is a free log retrieval operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_EntityResolver *EntityResolverFilterer) FilterAddressChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverAddressChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "AddressChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverAddressChangedIterator{contract: _EntityResolver.contract, event: "AddressChanged", logs: logs, sub: sub}, nil
}

// WatchAddressChanged is a free log subscription operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_EntityResolver *EntityResolverFilterer) WatchAddressChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverAddressChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "AddressChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverAddressChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "AddressChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressChanged is a log parse operation binding the contract event 0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752.
//
// Solidity: event AddressChanged(bytes32 indexed node, uint256 coinType, bytes newAddress)
func (_EntityResolver *EntityResolverFilterer) ParseAddressChanged(log types.Log) (*EntityResolverAddressChanged, error) {
	event := new(EntityResolverAddressChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "AddressChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverAuthorisationChangedIterator is returned from FilterAuthorisationChanged and is used to iterate over the raw logs and unpacked data for AuthorisationChanged events raised by the EntityResolver contract.
type EntityResolverAuthorisationChangedIterator struct {
	Event *EntityResolverAuthorisationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverAuthorisationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverAuthorisationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverAuthorisationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverAuthorisationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverAuthorisationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverAuthorisationChanged represents a AuthorisationChanged event raised by the EntityResolver contract.
type EntityResolverAuthorisationChanged struct {
	Node         [32]byte
	Owner        common.Address
	Target       common.Address
	IsAuthorised bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorisationChanged is a free log retrieval operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_EntityResolver *EntityResolverFilterer) FilterAuthorisationChanged(opts *bind.FilterOpts, node [][32]byte, owner []common.Address, target []common.Address) (*EntityResolverAuthorisationChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "AuthorisationChanged", nodeRule, ownerRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverAuthorisationChangedIterator{contract: _EntityResolver.contract, event: "AuthorisationChanged", logs: logs, sub: sub}, nil
}

// WatchAuthorisationChanged is a free log subscription operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_EntityResolver *EntityResolverFilterer) WatchAuthorisationChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverAuthorisationChanged, node [][32]byte, owner []common.Address, target []common.Address) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "AuthorisationChanged", nodeRule, ownerRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverAuthorisationChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "AuthorisationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorisationChanged is a log parse operation binding the contract event 0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df.
//
// Solidity: event AuthorisationChanged(bytes32 indexed node, address indexed owner, address indexed target, bool isAuthorised)
func (_EntityResolver *EntityResolverFilterer) ParseAuthorisationChanged(log types.Log) (*EntityResolverAuthorisationChanged, error) {
	event := new(EntityResolverAuthorisationChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "AuthorisationChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverContenthashChangedIterator is returned from FilterContenthashChanged and is used to iterate over the raw logs and unpacked data for ContenthashChanged events raised by the EntityResolver contract.
type EntityResolverContenthashChangedIterator struct {
	Event *EntityResolverContenthashChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverContenthashChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverContenthashChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverContenthashChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverContenthashChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverContenthashChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverContenthashChanged represents a ContenthashChanged event raised by the EntityResolver contract.
type EntityResolverContenthashChanged struct {
	Node [32]byte
	Hash []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContenthashChanged is a free log retrieval operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_EntityResolver *EntityResolverFilterer) FilterContenthashChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverContenthashChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "ContenthashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverContenthashChangedIterator{contract: _EntityResolver.contract, event: "ContenthashChanged", logs: logs, sub: sub}, nil
}

// WatchContenthashChanged is a free log subscription operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_EntityResolver *EntityResolverFilterer) WatchContenthashChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverContenthashChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "ContenthashChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverContenthashChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "ContenthashChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContenthashChanged is a log parse operation binding the contract event 0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578.
//
// Solidity: event ContenthashChanged(bytes32 indexed node, bytes hash)
func (_EntityResolver *EntityResolverFilterer) ParseContenthashChanged(log types.Log) (*EntityResolverContenthashChanged, error) {
	event := new(EntityResolverContenthashChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "ContenthashChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverInterfaceChangedIterator is returned from FilterInterfaceChanged and is used to iterate over the raw logs and unpacked data for InterfaceChanged events raised by the EntityResolver contract.
type EntityResolverInterfaceChangedIterator struct {
	Event *EntityResolverInterfaceChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverInterfaceChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverInterfaceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverInterfaceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverInterfaceChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverInterfaceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverInterfaceChanged represents a InterfaceChanged event raised by the EntityResolver contract.
type EntityResolverInterfaceChanged struct {
	Node        [32]byte
	InterfaceID [4]byte
	Implementer common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInterfaceChanged is a free log retrieval operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_EntityResolver *EntityResolverFilterer) FilterInterfaceChanged(opts *bind.FilterOpts, node [][32]byte, interfaceID [][4]byte) (*EntityResolverInterfaceChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var interfaceIDRule []interface{}
	for _, interfaceIDItem := range interfaceID {
		interfaceIDRule = append(interfaceIDRule, interfaceIDItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "InterfaceChanged", nodeRule, interfaceIDRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverInterfaceChangedIterator{contract: _EntityResolver.contract, event: "InterfaceChanged", logs: logs, sub: sub}, nil
}

// WatchInterfaceChanged is a free log subscription operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_EntityResolver *EntityResolverFilterer) WatchInterfaceChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverInterfaceChanged, node [][32]byte, interfaceID [][4]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var interfaceIDRule []interface{}
	for _, interfaceIDItem := range interfaceID {
		interfaceIDRule = append(interfaceIDRule, interfaceIDItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "InterfaceChanged", nodeRule, interfaceIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverInterfaceChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "InterfaceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInterfaceChanged is a log parse operation binding the contract event 0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa.
//
// Solidity: event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer)
func (_EntityResolver *EntityResolverFilterer) ParseInterfaceChanged(log types.Log) (*EntityResolverInterfaceChanged, error) {
	event := new(EntityResolverInterfaceChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "InterfaceChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverListItemChangedIterator is returned from FilterListItemChanged and is used to iterate over the raw logs and unpacked data for ListItemChanged events raised by the EntityResolver contract.
type EntityResolverListItemChangedIterator struct {
	Event *EntityResolverListItemChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverListItemChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverListItemChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverListItemChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverListItemChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverListItemChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverListItemChanged represents a ListItemChanged event raised by the EntityResolver contract.
type EntityResolverListItemChanged struct {
	Node  [32]byte
	Key   string
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterListItemChanged is a free log retrieval operation binding the contract event 0xad6a325380d85c50dfaa38511cbbbc97c46b9a52e342c8d705bf5515d0ef45b3.
//
// Solidity: event ListItemChanged(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) FilterListItemChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverListItemChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "ListItemChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverListItemChangedIterator{contract: _EntityResolver.contract, event: "ListItemChanged", logs: logs, sub: sub}, nil
}

// WatchListItemChanged is a free log subscription operation binding the contract event 0xad6a325380d85c50dfaa38511cbbbc97c46b9a52e342c8d705bf5515d0ef45b3.
//
// Solidity: event ListItemChanged(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) WatchListItemChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverListItemChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "ListItemChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverListItemChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "ListItemChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseListItemChanged is a log parse operation binding the contract event 0xad6a325380d85c50dfaa38511cbbbc97c46b9a52e342c8d705bf5515d0ef45b3.
//
// Solidity: event ListItemChanged(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) ParseListItemChanged(log types.Log) (*EntityResolverListItemChanged, error) {
	event := new(EntityResolverListItemChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "ListItemChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverListItemRemovedIterator is returned from FilterListItemRemoved and is used to iterate over the raw logs and unpacked data for ListItemRemoved events raised by the EntityResolver contract.
type EntityResolverListItemRemovedIterator struct {
	Event *EntityResolverListItemRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverListItemRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverListItemRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverListItemRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverListItemRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverListItemRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverListItemRemoved represents a ListItemRemoved event raised by the EntityResolver contract.
type EntityResolverListItemRemoved struct {
	Node  [32]byte
	Key   string
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterListItemRemoved is a free log retrieval operation binding the contract event 0x5dbbe7a1e616b629a61480b13fd4e89dfe8b604d35802cdf7b0bb03687e3eb49.
//
// Solidity: event ListItemRemoved(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) FilterListItemRemoved(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverListItemRemovedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "ListItemRemoved", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverListItemRemovedIterator{contract: _EntityResolver.contract, event: "ListItemRemoved", logs: logs, sub: sub}, nil
}

// WatchListItemRemoved is a free log subscription operation binding the contract event 0x5dbbe7a1e616b629a61480b13fd4e89dfe8b604d35802cdf7b0bb03687e3eb49.
//
// Solidity: event ListItemRemoved(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) WatchListItemRemoved(opts *bind.WatchOpts, sink chan<- *EntityResolverListItemRemoved, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "ListItemRemoved", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverListItemRemoved)
				if err := _EntityResolver.contract.UnpackLog(event, "ListItemRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseListItemRemoved is a log parse operation binding the contract event 0x5dbbe7a1e616b629a61480b13fd4e89dfe8b604d35802cdf7b0bb03687e3eb49.
//
// Solidity: event ListItemRemoved(bytes32 indexed node, string key, uint256 index)
func (_EntityResolver *EntityResolverFilterer) ParseListItemRemoved(log types.Log) (*EntityResolverListItemRemoved, error) {
	event := new(EntityResolverListItemRemoved)
	if err := _EntityResolver.contract.UnpackLog(event, "ListItemRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverNameChangedIterator is returned from FilterNameChanged and is used to iterate over the raw logs and unpacked data for NameChanged events raised by the EntityResolver contract.
type EntityResolverNameChangedIterator struct {
	Event *EntityResolverNameChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverNameChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverNameChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverNameChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverNameChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverNameChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverNameChanged represents a NameChanged event raised by the EntityResolver contract.
type EntityResolverNameChanged struct {
	Node [32]byte
	Name string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNameChanged is a free log retrieval operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_EntityResolver *EntityResolverFilterer) FilterNameChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverNameChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "NameChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverNameChangedIterator{contract: _EntityResolver.contract, event: "NameChanged", logs: logs, sub: sub}, nil
}

// WatchNameChanged is a free log subscription operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_EntityResolver *EntityResolverFilterer) WatchNameChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverNameChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "NameChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverNameChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "NameChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNameChanged is a log parse operation binding the contract event 0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7.
//
// Solidity: event NameChanged(bytes32 indexed node, string name)
func (_EntityResolver *EntityResolverFilterer) ParseNameChanged(log types.Log) (*EntityResolverNameChanged, error) {
	event := new(EntityResolverNameChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "NameChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverPubkeyChangedIterator is returned from FilterPubkeyChanged and is used to iterate over the raw logs and unpacked data for PubkeyChanged events raised by the EntityResolver contract.
type EntityResolverPubkeyChangedIterator struct {
	Event *EntityResolverPubkeyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverPubkeyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverPubkeyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverPubkeyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverPubkeyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverPubkeyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverPubkeyChanged represents a PubkeyChanged event raised by the EntityResolver contract.
type EntityResolverPubkeyChanged struct {
	Node [32]byte
	X    [32]byte
	Y    [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPubkeyChanged is a free log retrieval operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverFilterer) FilterPubkeyChanged(opts *bind.FilterOpts, node [][32]byte) (*EntityResolverPubkeyChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "PubkeyChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverPubkeyChangedIterator{contract: _EntityResolver.contract, event: "PubkeyChanged", logs: logs, sub: sub}, nil
}

// WatchPubkeyChanged is a free log subscription operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverFilterer) WatchPubkeyChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverPubkeyChanged, node [][32]byte) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "PubkeyChanged", nodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverPubkeyChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "PubkeyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePubkeyChanged is a log parse operation binding the contract event 0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46.
//
// Solidity: event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y)
func (_EntityResolver *EntityResolverFilterer) ParsePubkeyChanged(log types.Log) (*EntityResolverPubkeyChanged, error) {
	event := new(EntityResolverPubkeyChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "PubkeyChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// EntityResolverTextChangedIterator is returned from FilterTextChanged and is used to iterate over the raw logs and unpacked data for TextChanged events raised by the EntityResolver contract.
type EntityResolverTextChangedIterator struct {
	Event *EntityResolverTextChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EntityResolverTextChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EntityResolverTextChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EntityResolverTextChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EntityResolverTextChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EntityResolverTextChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EntityResolverTextChanged represents a TextChanged event raised by the EntityResolver contract.
type EntityResolverTextChanged struct {
	Node       [32]byte
	IndexedKey common.Hash
	Key        string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTextChanged is a free log retrieval operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_EntityResolver *EntityResolverFilterer) FilterTextChanged(opts *bind.FilterOpts, node [][32]byte, indexedKey []string) (*EntityResolverTextChangedIterator, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var indexedKeyRule []interface{}
	for _, indexedKeyItem := range indexedKey {
		indexedKeyRule = append(indexedKeyRule, indexedKeyItem)
	}

	logs, sub, err := _EntityResolver.contract.FilterLogs(opts, "TextChanged", nodeRule, indexedKeyRule)
	if err != nil {
		return nil, err
	}
	return &EntityResolverTextChangedIterator{contract: _EntityResolver.contract, event: "TextChanged", logs: logs, sub: sub}, nil
}

// WatchTextChanged is a free log subscription operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_EntityResolver *EntityResolverFilterer) WatchTextChanged(opts *bind.WatchOpts, sink chan<- *EntityResolverTextChanged, node [][32]byte, indexedKey []string) (event.Subscription, error) {

	var nodeRule []interface{}
	for _, nodeItem := range node {
		nodeRule = append(nodeRule, nodeItem)
	}
	var indexedKeyRule []interface{}
	for _, indexedKeyItem := range indexedKey {
		indexedKeyRule = append(indexedKeyRule, indexedKeyItem)
	}

	logs, sub, err := _EntityResolver.contract.WatchLogs(opts, "TextChanged", nodeRule, indexedKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EntityResolverTextChanged)
				if err := _EntityResolver.contract.UnpackLog(event, "TextChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTextChanged is a log parse operation binding the contract event 0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550.
//
// Solidity: event TextChanged(bytes32 indexed node, string indexed indexedKey, string key)
func (_EntityResolver *EntityResolverFilterer) ParseTextChanged(log types.Log) (*EntityResolverTextChanged, error) {
	event := new(EntityResolverTextChanged)
	if err := _EntityResolver.contract.UnpackLog(event, "TextChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}
